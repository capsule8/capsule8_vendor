// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/event.proto

package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContainerEventType int32

const (
	ContainerEventType_CONTAINER_EVENT_TYPE_UNKNOWN   ContainerEventType = 0
	ContainerEventType_CONTAINER_EVENT_TYPE_CREATED   ContainerEventType = 1
	ContainerEventType_CONTAINER_EVENT_TYPE_RUNNING   ContainerEventType = 2
	ContainerEventType_CONTAINER_EVENT_TYPE_EXITED    ContainerEventType = 3
	ContainerEventType_CONTAINER_EVENT_TYPE_DESTROYED ContainerEventType = 4
)

var ContainerEventType_name = map[int32]string{
	0: "CONTAINER_EVENT_TYPE_UNKNOWN",
	1: "CONTAINER_EVENT_TYPE_CREATED",
	2: "CONTAINER_EVENT_TYPE_RUNNING",
	3: "CONTAINER_EVENT_TYPE_EXITED",
	4: "CONTAINER_EVENT_TYPE_DESTROYED",
}
var ContainerEventType_value = map[string]int32{
	"CONTAINER_EVENT_TYPE_UNKNOWN":   0,
	"CONTAINER_EVENT_TYPE_CREATED":   1,
	"CONTAINER_EVENT_TYPE_RUNNING":   2,
	"CONTAINER_EVENT_TYPE_EXITED":    3,
	"CONTAINER_EVENT_TYPE_DESTROYED": 4,
}

func (x ContainerEventType) String() string {
	return proto.EnumName(ContainerEventType_name, int32(x))
}
func (ContainerEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type ProcessEventType int32

const (
	ProcessEventType_PROCESS_EVENT_TYPE_UNKNOWN ProcessEventType = 0
	ProcessEventType_PROCESS_EVENT_TYPE_FORK    ProcessEventType = 1
	ProcessEventType_PROCESS_EVENT_TYPE_EXEC    ProcessEventType = 2
	ProcessEventType_PROCESS_EVENT_TYPE_EXIT    ProcessEventType = 3
)

var ProcessEventType_name = map[int32]string{
	0: "PROCESS_EVENT_TYPE_UNKNOWN",
	1: "PROCESS_EVENT_TYPE_FORK",
	2: "PROCESS_EVENT_TYPE_EXEC",
	3: "PROCESS_EVENT_TYPE_EXIT",
}
var ProcessEventType_value = map[string]int32{
	"PROCESS_EVENT_TYPE_UNKNOWN": 0,
	"PROCESS_EVENT_TYPE_FORK":    1,
	"PROCESS_EVENT_TYPE_EXEC":    2,
	"PROCESS_EVENT_TYPE_EXIT":    3,
}

func (x ProcessEventType) String() string {
	return proto.EnumName(ProcessEventType_name, int32(x))
}
func (ProcessEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

type SyscallEventType int32

const (
	SyscallEventType_SYSCALL_EVENT_TYPE_UNKNOWN SyscallEventType = 0
	SyscallEventType_SYSCALL_EVENT_TYPE_ENTER   SyscallEventType = 1
	SyscallEventType_SYSCALL_EVENT_TYPE_EXIT    SyscallEventType = 2
)

var SyscallEventType_name = map[int32]string{
	0: "SYSCALL_EVENT_TYPE_UNKNOWN",
	1: "SYSCALL_EVENT_TYPE_ENTER",
	2: "SYSCALL_EVENT_TYPE_EXIT",
}
var SyscallEventType_value = map[string]int32{
	"SYSCALL_EVENT_TYPE_UNKNOWN": 0,
	"SYSCALL_EVENT_TYPE_ENTER":   1,
	"SYSCALL_EVENT_TYPE_EXIT":    2,
}

func (x SyscallEventType) String() string {
	return proto.EnumName(SyscallEventType_name, int32(x))
}
func (SyscallEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

type FileEventType int32

const (
	FileEventType_FILE_EVENT_TYPE_UNKNOWN FileEventType = 0
	FileEventType_FILE_EVENT_TYPE_OPEN    FileEventType = 1
)

var FileEventType_name = map[int32]string{
	0: "FILE_EVENT_TYPE_UNKNOWN",
	1: "FILE_EVENT_TYPE_OPEN",
}
var FileEventType_value = map[string]int32{
	"FILE_EVENT_TYPE_UNKNOWN": 0,
	"FILE_EVENT_TYPE_OPEN":    1,
}

func (x FileEventType) String() string {
	return proto.EnumName(FileEventType_name, int32(x))
}
func (FileEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

type KernelFunctionCallEventType int32

const (
	KernelFunctionCallEventType_KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN KernelFunctionCallEventType = 0
	KernelFunctionCallEventType_KERNEL_FUNCTION_CALL_EVENT_TYPE_ENTER   KernelFunctionCallEventType = 1
	KernelFunctionCallEventType_KERNEL_FUNCTION_CALL_EVENT_TYPE_EXIT    KernelFunctionCallEventType = 2
)

var KernelFunctionCallEventType_name = map[int32]string{
	0: "KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN",
	1: "KERNEL_FUNCTION_CALL_EVENT_TYPE_ENTER",
	2: "KERNEL_FUNCTION_CALL_EVENT_TYPE_EXIT",
}
var KernelFunctionCallEventType_value = map[string]int32{
	"KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN": 0,
	"KERNEL_FUNCTION_CALL_EVENT_TYPE_ENTER":   1,
	"KERNEL_FUNCTION_CALL_EVENT_TYPE_EXIT":    2,
}

func (x KernelFunctionCallEventType) String() string {
	return proto.EnumName(KernelFunctionCallEventType_name, int32(x))
}
func (KernelFunctionCallEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

type NetworkEventType int32

const (
	NetworkEventType_NETWORK_EVENT_TYPE_UNKNOWN          NetworkEventType = 0
	NetworkEventType_NETWORK_EVENT_TYPE_CONNECT_ATTEMPT  NetworkEventType = 1
	NetworkEventType_NETWORK_EVENT_TYPE_CONNECT_RESULT   NetworkEventType = 2
	NetworkEventType_NETWORK_EVENT_TYPE_BIND_ATTEMPT     NetworkEventType = 3
	NetworkEventType_NETWORK_EVENT_TYPE_BIND_RESULT      NetworkEventType = 4
	NetworkEventType_NETWORK_EVENT_TYPE_LISTEN_ATTEMPT   NetworkEventType = 5
	NetworkEventType_NETWORK_EVENT_TYPE_LISTEN_RESULT    NetworkEventType = 6
	NetworkEventType_NETWORK_EVENT_TYPE_ACCEPT_ATTEMPT   NetworkEventType = 7
	NetworkEventType_NETWORK_EVENT_TYPE_ACCEPT_RESULT    NetworkEventType = 8
	NetworkEventType_NETWORK_EVENT_TYPE_SENDTO_ATTEMPT   NetworkEventType = 9
	NetworkEventType_NETWORK_EVENT_TYPE_SENDTO_RESULT    NetworkEventType = 10
	NetworkEventType_NETWORK_EVENT_TYPE_RECVFROM_ATTEMPT NetworkEventType = 11
	NetworkEventType_NETWORK_EVENT_TYPE_RECVFROM_RESULT  NetworkEventType = 12
)

var NetworkEventType_name = map[int32]string{
	0:  "NETWORK_EVENT_TYPE_UNKNOWN",
	1:  "NETWORK_EVENT_TYPE_CONNECT_ATTEMPT",
	2:  "NETWORK_EVENT_TYPE_CONNECT_RESULT",
	3:  "NETWORK_EVENT_TYPE_BIND_ATTEMPT",
	4:  "NETWORK_EVENT_TYPE_BIND_RESULT",
	5:  "NETWORK_EVENT_TYPE_LISTEN_ATTEMPT",
	6:  "NETWORK_EVENT_TYPE_LISTEN_RESULT",
	7:  "NETWORK_EVENT_TYPE_ACCEPT_ATTEMPT",
	8:  "NETWORK_EVENT_TYPE_ACCEPT_RESULT",
	9:  "NETWORK_EVENT_TYPE_SENDTO_ATTEMPT",
	10: "NETWORK_EVENT_TYPE_SENDTO_RESULT",
	11: "NETWORK_EVENT_TYPE_RECVFROM_ATTEMPT",
	12: "NETWORK_EVENT_TYPE_RECVFROM_RESULT",
}
var NetworkEventType_value = map[string]int32{
	"NETWORK_EVENT_TYPE_UNKNOWN":          0,
	"NETWORK_EVENT_TYPE_CONNECT_ATTEMPT":  1,
	"NETWORK_EVENT_TYPE_CONNECT_RESULT":   2,
	"NETWORK_EVENT_TYPE_BIND_ATTEMPT":     3,
	"NETWORK_EVENT_TYPE_BIND_RESULT":      4,
	"NETWORK_EVENT_TYPE_LISTEN_ATTEMPT":   5,
	"NETWORK_EVENT_TYPE_LISTEN_RESULT":    6,
	"NETWORK_EVENT_TYPE_ACCEPT_ATTEMPT":   7,
	"NETWORK_EVENT_TYPE_ACCEPT_RESULT":    8,
	"NETWORK_EVENT_TYPE_SENDTO_ATTEMPT":   9,
	"NETWORK_EVENT_TYPE_SENDTO_RESULT":    10,
	"NETWORK_EVENT_TYPE_RECVFROM_ATTEMPT": 11,
	"NETWORK_EVENT_TYPE_RECVFROM_RESULT":  12,
}

func (x NetworkEventType) String() string {
	return proto.EnumName(NetworkEventType_name, int32(x))
}
func (NetworkEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

type KernelFunctionCallEvent_FieldType int32

const (
	KernelFunctionCallEvent_UNKNOWN KernelFunctionCallEvent_FieldType = 0
	KernelFunctionCallEvent_BYTES   KernelFunctionCallEvent_FieldType = 1
	KernelFunctionCallEvent_STRING  KernelFunctionCallEvent_FieldType = 2
	KernelFunctionCallEvent_SINT8   KernelFunctionCallEvent_FieldType = 3
	KernelFunctionCallEvent_SINT16  KernelFunctionCallEvent_FieldType = 4
	KernelFunctionCallEvent_SINT32  KernelFunctionCallEvent_FieldType = 5
	KernelFunctionCallEvent_SINT64  KernelFunctionCallEvent_FieldType = 6
	KernelFunctionCallEvent_UINT8   KernelFunctionCallEvent_FieldType = 7
	KernelFunctionCallEvent_UINT16  KernelFunctionCallEvent_FieldType = 8
	KernelFunctionCallEvent_UINT32  KernelFunctionCallEvent_FieldType = 9
	KernelFunctionCallEvent_UINT64  KernelFunctionCallEvent_FieldType = 10
)

var KernelFunctionCallEvent_FieldType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "BYTES",
	2:  "STRING",
	3:  "SINT8",
	4:  "SINT16",
	5:  "SINT32",
	6:  "SINT64",
	7:  "UINT8",
	8:  "UINT16",
	9:  "UINT32",
	10: "UINT64",
}
var KernelFunctionCallEvent_FieldType_value = map[string]int32{
	"UNKNOWN": 0,
	"BYTES":   1,
	"STRING":  2,
	"SINT8":   3,
	"SINT16":  4,
	"SINT32":  5,
	"SINT64":  6,
	"UINT8":   7,
	"UINT16":  8,
	"UINT32":  9,
	"UINT64":  10,
}

func (x KernelFunctionCallEvent_FieldType) String() string {
	return proto.EnumName(KernelFunctionCallEvent_FieldType_name, int32(x))
}
func (KernelFunctionCallEvent_FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor8, []int{8, 0}
}

type Event struct {
	// Unique identifier for the event
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Unique process identifier associated with the event to differentiate
	// reused values of the pid below.
	ProcessId string `protobuf:"bytes,2,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	// Unix pid of the process associated with the event
	ProcessPid int32 `protobuf:"varint,3,opt,name=process_pid,json=processPid" json:"process_pid,omitempty"`
	// Container identifier associated with the event
	ContainerId string `protobuf:"bytes,4,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	// Sensor identifier of the sensor instance that observed the event
	SensorId string `protobuf:"bytes,5,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
	// Sequence number from some unspecified starting point unique
	// to the Sensor. Provides a strict linear ordering of events with
	// the same sensor_id where no two events can have the same sequence
	// number. If it is present, it must be greater than zero. A zero
	// value indicates that there is no sequence number associated with
	// the event.
	SensorSequenceNumber uint64 `protobuf:"varint,6,opt,name=sensor_sequence_number,json=sensorSequenceNumber" json:"sensor_sequence_number,omitempty"`
	// Monotonic nanosecond timestamp from some unspecified starting
	// point unique to the Sensor. Can only be used to calculate time
	// intervals between events with the same sensor_id.
	SensorMonotimeNanos int64 `protobuf:"varint,7,opt,name=sensor_monotime_nanos,json=sensorMonotimeNanos" json:"sensor_monotime_nanos,omitempty"`
	// Process Lineage contains one process context for each process in the
	// hierarchy, starting with the current process, up to the root of the
	// process namespace.
	ProcessLineage []*Process `protobuf:"bytes,8,rep,name=process_lineage,json=processLineage" json:"process_lineage,omitempty"`
	// Name of container associated with the event
	ContainerName string `protobuf:"bytes,30,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	// Unique identifier of the container image
	ImageId string `protobuf:"bytes,31,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	//
	// Name of the container image (i.e. "busybox" or
	// "gcr.io/google_containers/nginx-ingress-controller")
	//
	ImageName string `protobuf:"bytes,32,opt,name=image_name,json=imageName" json:"image_name,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_Syscall
	//	*Event_Process
	//	*Event_File
	//	*Event_KernelCall
	//	*Event_Network
	//	*Event_Container
	//	*Event_Chargen
	//	*Event_Ticker
	Event isEvent_Event `protobuf_oneof:"event"`
	// Unix tid of the process thread associated with event
	ProcessTid int32 `protobuf:"varint,200,opt,name=process_tid,json=processTid" json:"process_tid,omitempty"`
	// CPU on which the event occurred
	Cpu int32 `protobuf:"varint,201,opt,name=cpu" json:"cpu,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Syscall struct {
	Syscall *SyscallEvent `protobuf:"bytes,10,opt,name=syscall,oneof"`
}
type Event_Process struct {
	Process *ProcessEvent `protobuf:"bytes,11,opt,name=process,oneof"`
}
type Event_File struct {
	File *FileEvent `protobuf:"bytes,12,opt,name=file,oneof"`
}
type Event_KernelCall struct {
	KernelCall *KernelFunctionCallEvent `protobuf:"bytes,13,opt,name=kernel_call,json=kernelCall,oneof"`
}
type Event_Network struct {
	Network *NetworkEvent `protobuf:"bytes,14,opt,name=network,oneof"`
}
type Event_Container struct {
	Container *ContainerEvent `protobuf:"bytes,20,opt,name=container,oneof"`
}
type Event_Chargen struct {
	Chargen *ChargenEvent `protobuf:"bytes,100,opt,name=chargen,oneof"`
}
type Event_Ticker struct {
	Ticker *TickerEvent `protobuf:"bytes,101,opt,name=ticker,oneof"`
}

func (*Event_Syscall) isEvent_Event()    {}
func (*Event_Process) isEvent_Event()    {}
func (*Event_File) isEvent_Event()       {}
func (*Event_KernelCall) isEvent_Event() {}
func (*Event_Network) isEvent_Event()    {}
func (*Event_Container) isEvent_Event()  {}
func (*Event_Chargen) isEvent_Event()    {}
func (*Event_Ticker) isEvent_Event()     {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *Event) GetProcessPid() int32 {
	if m != nil {
		return m.ProcessPid
	}
	return 0
}

func (m *Event) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *Event) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *Event) GetSensorSequenceNumber() uint64 {
	if m != nil {
		return m.SensorSequenceNumber
	}
	return 0
}

func (m *Event) GetSensorMonotimeNanos() int64 {
	if m != nil {
		return m.SensorMonotimeNanos
	}
	return 0
}

func (m *Event) GetProcessLineage() []*Process {
	if m != nil {
		return m.ProcessLineage
	}
	return nil
}

func (m *Event) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *Event) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *Event) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *Event) GetSyscall() *SyscallEvent {
	if x, ok := m.GetEvent().(*Event_Syscall); ok {
		return x.Syscall
	}
	return nil
}

func (m *Event) GetProcess() *ProcessEvent {
	if x, ok := m.GetEvent().(*Event_Process); ok {
		return x.Process
	}
	return nil
}

func (m *Event) GetFile() *FileEvent {
	if x, ok := m.GetEvent().(*Event_File); ok {
		return x.File
	}
	return nil
}

func (m *Event) GetKernelCall() *KernelFunctionCallEvent {
	if x, ok := m.GetEvent().(*Event_KernelCall); ok {
		return x.KernelCall
	}
	return nil
}

func (m *Event) GetNetwork() *NetworkEvent {
	if x, ok := m.GetEvent().(*Event_Network); ok {
		return x.Network
	}
	return nil
}

func (m *Event) GetContainer() *ContainerEvent {
	if x, ok := m.GetEvent().(*Event_Container); ok {
		return x.Container
	}
	return nil
}

func (m *Event) GetChargen() *ChargenEvent {
	if x, ok := m.GetEvent().(*Event_Chargen); ok {
		return x.Chargen
	}
	return nil
}

func (m *Event) GetTicker() *TickerEvent {
	if x, ok := m.GetEvent().(*Event_Ticker); ok {
		return x.Ticker
	}
	return nil
}

func (m *Event) GetProcessTid() int32 {
	if m != nil {
		return m.ProcessTid
	}
	return 0
}

func (m *Event) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Syscall)(nil),
		(*Event_Process)(nil),
		(*Event_File)(nil),
		(*Event_KernelCall)(nil),
		(*Event_Network)(nil),
		(*Event_Container)(nil),
		(*Event_Chargen)(nil),
		(*Event_Ticker)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Syscall:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Syscall); err != nil {
			return err
		}
	case *Event_Process:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Process); err != nil {
			return err
		}
	case *Event_File:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.File); err != nil {
			return err
		}
	case *Event_KernelCall:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KernelCall); err != nil {
			return err
		}
	case *Event_Network:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Network); err != nil {
			return err
		}
	case *Event_Container:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Container); err != nil {
			return err
		}
	case *Event_Chargen:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chargen); err != nil {
			return err
		}
	case *Event_Ticker:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ticker); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 10: // event.syscall
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SyscallEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Syscall{msg}
		return true, err
	case 11: // event.process
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcessEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Process{msg}
		return true, err
	case 12: // event.file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_File{msg}
		return true, err
	case 13: // event.kernel_call
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KernelFunctionCallEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_KernelCall{msg}
		return true, err
	case 14: // event.network
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NetworkEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Network{msg}
		return true, err
	case 20: // event.container
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ContainerEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Container{msg}
		return true, err
	case 100: // event.chargen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChargenEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Chargen{msg}
		return true, err
	case 101: // event.ticker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TickerEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Ticker{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Syscall:
		s := proto.Size(x.Syscall)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Process:
		s := proto.Size(x.Process)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_File:
		s := proto.Size(x.File)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_KernelCall:
		s := proto.Size(x.KernelCall)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Network:
		s := proto.Size(x.Network)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Container:
		s := proto.Size(x.Container)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Chargen:
		s := proto.Size(x.Chargen)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Ticker:
		s := proto.Size(x.Ticker)
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ChargenEvent struct {
	// Index of the first character in this Event in relation to all of
	// the characters that have been generated in this stream.
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// The next one or more characters in the autogenerated stream
	Characters string `protobuf:"bytes,2,opt,name=characters" json:"characters,omitempty"`
}

func (m *ChargenEvent) Reset()                    { *m = ChargenEvent{} }
func (m *ChargenEvent) String() string            { return proto.CompactTextString(m) }
func (*ChargenEvent) ProtoMessage()               {}
func (*ChargenEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *ChargenEvent) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ChargenEvent) GetCharacters() string {
	if m != nil {
		return m.Characters
	}
	return ""
}

type TickerEvent struct {
	// The number of seconds elapsed since January 1, 1970 UTC.
	//
	// https://golang.org/pkg/time/#Time.Unix
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// The number of nanoseconds elapsed since January 1, 1970 UTC
	//
	// https://golang.org/pkg/time/#Time.UnixNano
	Nanoseconds int64 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *TickerEvent) Reset()                    { *m = TickerEvent{} }
func (m *TickerEvent) String() string            { return proto.CompactTextString(m) }
func (*TickerEvent) ProtoMessage()               {}
func (*TickerEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *TickerEvent) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *TickerEvent) GetNanoseconds() int64 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// ContainerEvent describes a Docker container or Rkt App lifecycle event
type ContainerEvent struct {
	Type ContainerEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.ContainerEventType" json:"type,omitempty"`
	Name string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Unique identifier of the container image
	ImageId string `protobuf:"bytes,10,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	//
	// Name of the container image (i.e. "busybox" or
	// "gcr.io/google_containers/nginx-ingress-controller")
	//
	ImageName string `protobuf:"bytes,11,opt,name=image_name,json=imageName" json:"image_name,omitempty"`
	// Host process identifier of the container's init process.
	HostPid int32 `protobuf:"zigzag32,20,opt,name=host_pid,json=hostPid" json:"host_pid,omitempty"`
	// The exit code of the container if it has exited
	ExitCode int32 `protobuf:"zigzag32,30,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	// Docker container configuration file
	DockerConfigJson string `protobuf:"bytes,100,opt,name=docker_config_json,json=dockerConfigJson" json:"docker_config_json,omitempty"`
	// OCI container configuration file
	OciConfigJson string `protobuf:"bytes,101,opt,name=oci_config_json,json=ociConfigJson" json:"oci_config_json,omitempty"`
}

func (m *ContainerEvent) Reset()                    { *m = ContainerEvent{} }
func (m *ContainerEvent) String() string            { return proto.CompactTextString(m) }
func (*ContainerEvent) ProtoMessage()               {}
func (*ContainerEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *ContainerEvent) GetType() ContainerEventType {
	if m != nil {
		return m.Type
	}
	return ContainerEventType_CONTAINER_EVENT_TYPE_UNKNOWN
}

func (m *ContainerEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerEvent) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *ContainerEvent) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *ContainerEvent) GetHostPid() int32 {
	if m != nil {
		return m.HostPid
	}
	return 0
}

func (m *ContainerEvent) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *ContainerEvent) GetDockerConfigJson() string {
	if m != nil {
		return m.DockerConfigJson
	}
	return ""
}

func (m *ContainerEvent) GetOciConfigJson() string {
	if m != nil {
		return m.OciConfigJson
	}
	return ""
}

type ProcessEvent struct {
	Type ProcessEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.ProcessEventType" json:"type,omitempty"`
	// Optional
	ForkChildPid int32 `protobuf:"zigzag32,10,opt,name=fork_child_pid,json=forkChildPid" json:"fork_child_pid,omitempty"`
	// Optional
	ForkChildId string `protobuf:"bytes,11,opt,name=fork_child_id,json=forkChildId" json:"fork_child_id,omitempty"`
	// Optional
	ExecFilename    string   `protobuf:"bytes,20,opt,name=exec_filename,json=execFilename" json:"exec_filename,omitempty"`
	ExecCommandLine []string `protobuf:"bytes,21,rep,name=exec_command_line,json=execCommandLine" json:"exec_command_line,omitempty"`
	// Optional
	ExitCode int32 `protobuf:"zigzag32,30,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
}

func (m *ProcessEvent) Reset()                    { *m = ProcessEvent{} }
func (m *ProcessEvent) String() string            { return proto.CompactTextString(m) }
func (*ProcessEvent) ProtoMessage()               {}
func (*ProcessEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *ProcessEvent) GetType() ProcessEventType {
	if m != nil {
		return m.Type
	}
	return ProcessEventType_PROCESS_EVENT_TYPE_UNKNOWN
}

func (m *ProcessEvent) GetForkChildPid() int32 {
	if m != nil {
		return m.ForkChildPid
	}
	return 0
}

func (m *ProcessEvent) GetForkChildId() string {
	if m != nil {
		return m.ForkChildId
	}
	return ""
}

func (m *ProcessEvent) GetExecFilename() string {
	if m != nil {
		return m.ExecFilename
	}
	return ""
}

func (m *ProcessEvent) GetExecCommandLine() []string {
	if m != nil {
		return m.ExecCommandLine
	}
	return nil
}

func (m *ProcessEvent) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type SyscallEvent struct {
	Type SyscallEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.SyscallEventType" json:"type,omitempty"`
	Id   int64            `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Arg0 uint64           `protobuf:"varint,10,opt,name=arg0" json:"arg0,omitempty"`
	Arg1 uint64           `protobuf:"varint,11,opt,name=arg1" json:"arg1,omitempty"`
	Arg2 uint64           `protobuf:"varint,12,opt,name=arg2" json:"arg2,omitempty"`
	Arg3 uint64           `protobuf:"varint,13,opt,name=arg3" json:"arg3,omitempty"`
	Arg4 uint64           `protobuf:"varint,14,opt,name=arg4" json:"arg4,omitempty"`
	Arg5 uint64           `protobuf:"varint,15,opt,name=arg5" json:"arg5,omitempty"`
	Ret  int64            `protobuf:"varint,20,opt,name=ret" json:"ret,omitempty"`
}

func (m *SyscallEvent) Reset()                    { *m = SyscallEvent{} }
func (m *SyscallEvent) String() string            { return proto.CompactTextString(m) }
func (*SyscallEvent) ProtoMessage()               {}
func (*SyscallEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *SyscallEvent) GetType() SyscallEventType {
	if m != nil {
		return m.Type
	}
	return SyscallEventType_SYSCALL_EVENT_TYPE_UNKNOWN
}

func (m *SyscallEvent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyscallEvent) GetArg0() uint64 {
	if m != nil {
		return m.Arg0
	}
	return 0
}

func (m *SyscallEvent) GetArg1() uint64 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

func (m *SyscallEvent) GetArg2() uint64 {
	if m != nil {
		return m.Arg2
	}
	return 0
}

func (m *SyscallEvent) GetArg3() uint64 {
	if m != nil {
		return m.Arg3
	}
	return 0
}

func (m *SyscallEvent) GetArg4() uint64 {
	if m != nil {
		return m.Arg4
	}
	return 0
}

func (m *SyscallEvent) GetArg5() uint64 {
	if m != nil {
		return m.Arg5
	}
	return 0
}

func (m *SyscallEvent) GetRet() int64 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type FileEvent struct {
	Type      FileEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.FileEventType" json:"type,omitempty"`
	Filename  string        `protobuf:"bytes,10,opt,name=filename" json:"filename,omitempty"`
	OpenFlags int32         `protobuf:"zigzag32,11,opt,name=open_flags,json=openFlags" json:"open_flags,omitempty"`
	OpenMode  int32         `protobuf:"zigzag32,12,opt,name=open_mode,json=openMode" json:"open_mode,omitempty"`
}

func (m *FileEvent) Reset()                    { *m = FileEvent{} }
func (m *FileEvent) String() string            { return proto.CompactTextString(m) }
func (*FileEvent) ProtoMessage()               {}
func (*FileEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *FileEvent) GetType() FileEventType {
	if m != nil {
		return m.Type
	}
	return FileEventType_FILE_EVENT_TYPE_UNKNOWN
}

func (m *FileEvent) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileEvent) GetOpenFlags() int32 {
	if m != nil {
		return m.OpenFlags
	}
	return 0
}

func (m *FileEvent) GetOpenMode() int32 {
	if m != nil {
		return m.OpenMode
	}
	return 0
}

type Process struct {
	Pid     int32  `protobuf:"zigzag32,1,opt,name=pid" json:"pid,omitempty"`
	Command string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *Process) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Process) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type KernelFunctionCallEvent struct {
	Arguments map[string]*KernelFunctionCallEvent_FieldValue `protobuf:"bytes,1,rep,name=arguments" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *KernelFunctionCallEvent) Reset()                    { *m = KernelFunctionCallEvent{} }
func (m *KernelFunctionCallEvent) String() string            { return proto.CompactTextString(m) }
func (*KernelFunctionCallEvent) ProtoMessage()               {}
func (*KernelFunctionCallEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *KernelFunctionCallEvent) GetArguments() map[string]*KernelFunctionCallEvent_FieldValue {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type KernelFunctionCallEvent_FieldValue struct {
	FieldType KernelFunctionCallEvent_FieldType `protobuf:"varint,1,opt,name=field_type,json=fieldType,enum=capsule8.api.v0.KernelFunctionCallEvent_FieldType" json:"field_type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*KernelFunctionCallEvent_FieldValue_BytesValue
	//	*KernelFunctionCallEvent_FieldValue_StringValue
	//	*KernelFunctionCallEvent_FieldValue_SignedValue
	//	*KernelFunctionCallEvent_FieldValue_UnsignedValue
	Value isKernelFunctionCallEvent_FieldValue_Value `protobuf_oneof:"value"`
}

func (m *KernelFunctionCallEvent_FieldValue) Reset()         { *m = KernelFunctionCallEvent_FieldValue{} }
func (m *KernelFunctionCallEvent_FieldValue) String() string { return proto.CompactTextString(m) }
func (*KernelFunctionCallEvent_FieldValue) ProtoMessage()    {}
func (*KernelFunctionCallEvent_FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{8, 0}
}

type isKernelFunctionCallEvent_FieldValue_Value interface {
	isKernelFunctionCallEvent_FieldValue_Value()
}

type KernelFunctionCallEvent_FieldValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,2,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type KernelFunctionCallEvent_FieldValue_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}
type KernelFunctionCallEvent_FieldValue_SignedValue struct {
	SignedValue int64 `protobuf:"zigzag64,4,opt,name=signed_value,json=signedValue,oneof"`
}
type KernelFunctionCallEvent_FieldValue_UnsignedValue struct {
	UnsignedValue uint64 `protobuf:"varint,5,opt,name=unsigned_value,json=unsignedValue,oneof"`
}

func (*KernelFunctionCallEvent_FieldValue_BytesValue) isKernelFunctionCallEvent_FieldValue_Value()  {}
func (*KernelFunctionCallEvent_FieldValue_StringValue) isKernelFunctionCallEvent_FieldValue_Value() {}
func (*KernelFunctionCallEvent_FieldValue_SignedValue) isKernelFunctionCallEvent_FieldValue_Value() {}
func (*KernelFunctionCallEvent_FieldValue_UnsignedValue) isKernelFunctionCallEvent_FieldValue_Value() {
}

func (m *KernelFunctionCallEvent_FieldValue) GetValue() isKernelFunctionCallEvent_FieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KernelFunctionCallEvent_FieldValue) GetFieldType() KernelFunctionCallEvent_FieldType {
	if m != nil {
		return m.FieldType
	}
	return KernelFunctionCallEvent_UNKNOWN
}

func (m *KernelFunctionCallEvent_FieldValue) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *KernelFunctionCallEvent_FieldValue) GetStringValue() string {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *KernelFunctionCallEvent_FieldValue) GetSignedValue() int64 {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_SignedValue); ok {
		return x.SignedValue
	}
	return 0
}

func (m *KernelFunctionCallEvent_FieldValue) GetUnsignedValue() uint64 {
	if x, ok := m.GetValue().(*KernelFunctionCallEvent_FieldValue_UnsignedValue); ok {
		return x.UnsignedValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KernelFunctionCallEvent_FieldValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KernelFunctionCallEvent_FieldValue_OneofMarshaler, _KernelFunctionCallEvent_FieldValue_OneofUnmarshaler, _KernelFunctionCallEvent_FieldValue_OneofSizer, []interface{}{
		(*KernelFunctionCallEvent_FieldValue_BytesValue)(nil),
		(*KernelFunctionCallEvent_FieldValue_StringValue)(nil),
		(*KernelFunctionCallEvent_FieldValue_SignedValue)(nil),
		(*KernelFunctionCallEvent_FieldValue_UnsignedValue)(nil),
	}
}

func _KernelFunctionCallEvent_FieldValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KernelFunctionCallEvent_FieldValue)
	// value
	switch x := m.Value.(type) {
	case *KernelFunctionCallEvent_FieldValue_BytesValue:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case *KernelFunctionCallEvent_FieldValue_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *KernelFunctionCallEvent_FieldValue_SignedValue:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeZigzag64(uint64(x.SignedValue))
	case *KernelFunctionCallEvent_FieldValue_UnsignedValue:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.UnsignedValue))
	case nil:
	default:
		return fmt.Errorf("KernelFunctionCallEvent_FieldValue.Value has unexpected type %T", x)
	}
	return nil
}

func _KernelFunctionCallEvent_FieldValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KernelFunctionCallEvent_FieldValue)
	switch tag {
	case 2: // value.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &KernelFunctionCallEvent_FieldValue_BytesValue{x}
		return true, err
	case 3: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &KernelFunctionCallEvent_FieldValue_StringValue{x}
		return true, err
	case 4: // value.signed_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.Value = &KernelFunctionCallEvent_FieldValue_SignedValue{int64(x)}
		return true, err
	case 5: // value.unsigned_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &KernelFunctionCallEvent_FieldValue_UnsignedValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _KernelFunctionCallEvent_FieldValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KernelFunctionCallEvent_FieldValue)
	// value
	switch x := m.Value.(type) {
	case *KernelFunctionCallEvent_FieldValue_BytesValue:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *KernelFunctionCallEvent_FieldValue_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *KernelFunctionCallEvent_FieldValue_SignedValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint64(x.SignedValue<<1) ^ uint64((int64(x.SignedValue) >> 63))))
	case *KernelFunctionCallEvent_FieldValue_UnsignedValue:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.UnsignedValue))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NetworkEvent struct {
	Type    NetworkEventType `protobuf:"varint,1,opt,name=type,enum=capsule8.api.v0.NetworkEventType" json:"type,omitempty"`
	Sockfd  uint64           `protobuf:"varint,10,opt,name=sockfd" json:"sockfd,omitempty"`
	Address *NetworkAddress  `protobuf:"bytes,11,opt,name=address" json:"address,omitempty"`
	Result  int64            `protobuf:"zigzag64,12,opt,name=result" json:"result,omitempty"`
	Backlog uint64           `protobuf:"varint,13,opt,name=backlog" json:"backlog,omitempty"`
}

func (m *NetworkEvent) Reset()                    { *m = NetworkEvent{} }
func (m *NetworkEvent) String() string            { return proto.CompactTextString(m) }
func (*NetworkEvent) ProtoMessage()               {}
func (*NetworkEvent) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *NetworkEvent) GetType() NetworkEventType {
	if m != nil {
		return m.Type
	}
	return NetworkEventType_NETWORK_EVENT_TYPE_UNKNOWN
}

func (m *NetworkEvent) GetSockfd() uint64 {
	if m != nil {
		return m.Sockfd
	}
	return 0
}

func (m *NetworkEvent) GetAddress() *NetworkAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NetworkEvent) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *NetworkEvent) GetBacklog() uint64 {
	if m != nil {
		return m.Backlog
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "capsule8.api.v0.Event")
	proto.RegisterType((*ChargenEvent)(nil), "capsule8.api.v0.ChargenEvent")
	proto.RegisterType((*TickerEvent)(nil), "capsule8.api.v0.TickerEvent")
	proto.RegisterType((*ContainerEvent)(nil), "capsule8.api.v0.ContainerEvent")
	proto.RegisterType((*ProcessEvent)(nil), "capsule8.api.v0.ProcessEvent")
	proto.RegisterType((*SyscallEvent)(nil), "capsule8.api.v0.SyscallEvent")
	proto.RegisterType((*FileEvent)(nil), "capsule8.api.v0.FileEvent")
	proto.RegisterType((*Process)(nil), "capsule8.api.v0.Process")
	proto.RegisterType((*KernelFunctionCallEvent)(nil), "capsule8.api.v0.KernelFunctionCallEvent")
	proto.RegisterType((*KernelFunctionCallEvent_FieldValue)(nil), "capsule8.api.v0.KernelFunctionCallEvent.FieldValue")
	proto.RegisterType((*NetworkEvent)(nil), "capsule8.api.v0.NetworkEvent")
	proto.RegisterEnum("capsule8.api.v0.ContainerEventType", ContainerEventType_name, ContainerEventType_value)
	proto.RegisterEnum("capsule8.api.v0.ProcessEventType", ProcessEventType_name, ProcessEventType_value)
	proto.RegisterEnum("capsule8.api.v0.SyscallEventType", SyscallEventType_name, SyscallEventType_value)
	proto.RegisterEnum("capsule8.api.v0.FileEventType", FileEventType_name, FileEventType_value)
	proto.RegisterEnum("capsule8.api.v0.KernelFunctionCallEventType", KernelFunctionCallEventType_name, KernelFunctionCallEventType_value)
	proto.RegisterEnum("capsule8.api.v0.NetworkEventType", NetworkEventType_name, NetworkEventType_value)
	proto.RegisterEnum("capsule8.api.v0.KernelFunctionCallEvent_FieldType", KernelFunctionCallEvent_FieldType_name, KernelFunctionCallEvent_FieldType_value)
}

func init() { proto.RegisterFile("capsule8/api/v0/event.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xcd, 0x72, 0xdb, 0xc8,
	0x11, 0x36, 0xf8, 0x23, 0x92, 0x4d, 0x8a, 0x82, 0x26, 0xda, 0x5d, 0xac, 0xe4, 0x95, 0x68, 0xca,
	0x5e, 0x33, 0x4a, 0x4a, 0xb6, 0x29, 0xd9, 0xeb, 0xe4, 0x92, 0xa2, 0x21, 0x30, 0x46, 0x24, 0x83,
	0xca, 0x10, 0xf2, 0xae, 0x73, 0x41, 0x41, 0xc0, 0x88, 0x46, 0x44, 0x02, 0x5c, 0x00, 0x54, 0xac,
	0x6b, 0x6e, 0x39, 0xe4, 0x9c, 0x63, 0x4e, 0x79, 0x8e, 0x1c, 0xf3, 0xf3, 0x12, 0x79, 0x89, 0x5c,
	0x93, 0x4a, 0xcd, 0x0f, 0x40, 0x50, 0x22, 0xa4, 0xcd, 0x6d, 0xe6, 0xfb, 0xbe, 0xee, 0xe9, 0x6e,
	0x4c, 0xf7, 0xb0, 0x08, 0x5b, 0x8e, 0x3d, 0x8d, 0x66, 0x63, 0xf2, 0xfa, 0x99, 0x3d, 0xf5, 0x9e,
	0x5d, 0x3d, 0x7f, 0x46, 0xae, 0x88, 0x1f, 0xef, 0x4f, 0xc3, 0x20, 0x0e, 0xd0, 0x5a, 0x42, 0xee,
	0xdb, 0x53, 0x6f, 0xff, 0xea, 0xf9, 0xe6, 0x2d, 0x75, 0x7c, 0x3d, 0x25, 0x11, 0x57, 0xb7, 0xff,
	0x56, 0x81, 0xb2, 0x46, 0xad, 0x51, 0x13, 0x0a, 0x9e, 0xab, 0x48, 0x2d, 0xa9, 0x53, 0xc3, 0x05,
	0xcf, 0x45, 0x5f, 0x01, 0x4c, 0xc3, 0xc0, 0x21, 0x51, 0x64, 0x79, 0xae, 0x52, 0x60, 0x78, 0x4d,
	0x20, 0xba, 0x8b, 0x76, 0xa0, 0x9e, 0xd0, 0x53, 0xcf, 0x55, 0x8a, 0x2d, 0xa9, 0x53, 0xc6, 0x89,
	0xc5, 0xa9, 0xe7, 0xa2, 0x47, 0xd0, 0x70, 0x02, 0x3f, 0xb6, 0x3d, 0x9f, 0x84, 0xd4, 0x43, 0x89,
	0x79, 0xa8, 0xa7, 0x98, 0xee, 0xa2, 0x2d, 0xa8, 0x45, 0xc4, 0x8f, 0x02, 0xc6, 0x97, 0x19, 0x5f,
	0xe5, 0x80, 0xee, 0xa2, 0x43, 0xf8, 0x5c, 0x90, 0x11, 0xf9, 0x7e, 0x46, 0x7c, 0x87, 0x58, 0xfe,
	0x6c, 0x72, 0x4e, 0x42, 0x65, 0xa5, 0x25, 0x75, 0x4a, 0x78, 0x83, 0xb3, 0x43, 0x41, 0x1a, 0x8c,
	0x43, 0x5d, 0xf8, 0x4c, 0x58, 0x4d, 0x02, 0x3f, 0x88, 0xbd, 0x09, 0xb1, 0x7c, 0xdb, 0x0f, 0x22,
	0xa5, 0xd2, 0x92, 0x3a, 0x45, 0xfc, 0x23, 0x4e, 0xbe, 0x13, 0x9c, 0x41, 0x29, 0xd4, 0x83, 0xb5,
	0x24, 0x95, 0xb1, 0xe7, 0x13, 0x7b, 0x44, 0x94, 0x6a, 0xab, 0xd8, 0xa9, 0x77, 0x95, 0xfd, 0x1b,
	0xb5, 0xdc, 0x3f, 0xe5, 0x3a, 0xdc, 0x14, 0x06, 0x27, 0x5c, 0x8f, 0x9e, 0x40, 0x73, 0x9e, 0xac,
	0x6f, 0x4f, 0x88, 0xb2, 0xcd, 0xd2, 0x59, 0x4d, 0x51, 0xc3, 0x9e, 0x10, 0xf4, 0x25, 0x54, 0xbd,
	0x89, 0x3d, 0x22, 0x34, 0xdf, 0x1d, 0x26, 0xa8, 0xb0, 0xbd, 0xce, 0xca, 0xcd, 0x29, 0x66, 0xdd,
	0xe2, 0xe5, 0x66, 0x08, 0xb3, 0xfc, 0x19, 0x54, 0xa2, 0xeb, 0xc8, 0xb1, 0xc7, 0x63, 0x05, 0x5a,
	0x52, 0xa7, 0xde, 0xfd, 0xea, 0x56, 0x6c, 0x43, 0xce, 0xb3, 0xaf, 0xf9, 0xf6, 0x01, 0x4e, 0xf4,
	0xd4, 0x54, 0x44, 0xab, 0xd4, 0x73, 0x4c, 0x45, 0x5a, 0xa9, 0xa9, 0xd0, 0xa3, 0xe7, 0x50, 0xba,
	0xf0, 0xc6, 0x44, 0x69, 0x30, 0xbb, 0xcd, 0x5b, 0x76, 0x7d, 0x6f, 0x4c, 0x12, 0x23, 0xa6, 0x44,
	0xc7, 0x50, 0xbf, 0x24, 0xa1, 0x4f, 0xc6, 0x16, 0x8b, 0x75, 0x95, 0x19, 0x76, 0x6e, 0x19, 0x1e,
	0x33, 0x4d, 0x7f, 0xe6, 0x3b, 0xb1, 0x17, 0xf8, 0x6a, 0x26, 0x6c, 0xe0, 0xe6, 0xaa, 0x88, 0xdc,
	0x27, 0xf1, 0xef, 0x82, 0xf0, 0x52, 0x69, 0xe6, 0x44, 0x6e, 0x70, 0x3e, 0x8d, 0x5c, 0xe8, 0xd1,
	0x2f, 0xa0, 0x96, 0x96, 0x5e, 0xd9, 0x60, 0xc6, 0x3b, 0xb7, 0x8c, 0xd5, 0x44, 0x91, 0x98, 0xcf,
	0x6d, 0xe8, 0xd9, 0xce, 0x47, 0x3b, 0x1c, 0x11, 0x5f, 0x71, 0x73, 0xce, 0x56, 0x39, 0x9f, 0x9e,
	0x2d, 0xf4, 0xe8, 0x15, 0xac, 0xc4, 0x9e, 0x73, 0x49, 0x42, 0x85, 0x30, 0xcb, 0x87, 0xb7, 0x2c,
	0x4d, 0x46, 0x27, 0x86, 0x42, 0x8d, 0x5a, 0xf3, 0x96, 0x8a, 0x3d, 0x57, 0xf9, 0xbb, 0xb4, 0xd0,
	0x53, 0xa6, 0xe7, 0xa2, 0x75, 0x28, 0x3a, 0xd3, 0x99, 0xf2, 0x0f, 0xce, 0xd0, 0xf5, 0x9b, 0x0a,
	0x94, 0x59, 0xf7, 0xb7, 0x8f, 0xa0, 0x91, 0x0d, 0x08, 0x6d, 0x40, 0xd9, 0xf3, 0x5d, 0xf2, 0x89,
	0xb5, 0x74, 0x09, 0xf3, 0x0d, 0xda, 0x06, 0xa0, 0x61, 0xda, 0x4e, 0x4c, 0xc2, 0x48, 0x74, 0x75,
	0x06, 0x69, 0xeb, 0x50, 0xcf, 0x04, 0x87, 0x14, 0xa8, 0x44, 0xc4, 0x09, 0x7c, 0x37, 0x62, 0x6e,
	0x8a, 0x38, 0xd9, 0xd2, 0x60, 0x59, 0x63, 0x09, 0xb6, 0xc0, 0xd8, 0x2c, 0xd4, 0xfe, 0x4b, 0x01,
	0x9a, 0x8b, 0x15, 0x46, 0xdf, 0x40, 0x89, 0x0e, 0x1f, 0xe6, 0xab, 0xd9, 0xdd, 0xbd, 0xe7, 0x83,
	0x98, 0xd7, 0x53, 0x82, 0x99, 0x01, 0x42, 0x50, 0x62, 0x7d, 0xc1, 0x03, 0x66, 0xeb, 0x85, 0x66,
	0x82, 0xbb, 0x9a, 0xa9, 0x7e, 0xb3, 0x99, 0xbe, 0x84, 0xea, 0xc7, 0x20, 0x8a, 0xd9, 0xe0, 0xa2,
	0x77, 0x63, 0x1d, 0x57, 0xe8, 0x9e, 0x4e, 0xad, 0x2d, 0xa8, 0x91, 0x4f, 0x5e, 0x6c, 0x39, 0x81,
	0xcb, 0x7b, 0x78, 0x1d, 0x57, 0x29, 0xa0, 0x06, 0x2e, 0x41, 0x3f, 0x05, 0xe4, 0x06, 0xb4, 0x38,
	0x96, 0x13, 0xf8, 0x17, 0xde, 0xc8, 0xfa, 0x6d, 0x14, 0xf0, 0xeb, 0x51, 0xc3, 0x32, 0x67, 0x54,
	0x46, 0xfc, 0x2a, 0x0a, 0x7c, 0xf4, 0x35, 0xac, 0x05, 0x8e, 0xb7, 0x20, 0x25, 0x7c, 0x28, 0x04,
	0x8e, 0x37, 0xd7, 0xb5, 0xff, 0x23, 0x41, 0x23, 0xdb, 0x80, 0xe8, 0xe5, 0x42, 0x95, 0x1e, 0xdd,
	0xd9, 0xad, 0x99, 0x1a, 0x3d, 0x86, 0xe6, 0x45, 0x10, 0x5e, 0x5a, 0xce, 0x47, 0x6f, 0xec, 0xb2,
	0xdc, 0x80, 0xc5, 0xdf, 0xa0, 0xa8, 0x4a, 0x41, 0x9a, 0x60, 0x1b, 0x56, 0x33, 0x2a, 0xcf, 0x15,
	0xd5, 0xa9, 0xa7, 0x22, 0xdd, 0x45, 0xbb, 0xb0, 0x4a, 0x3e, 0x11, 0xc7, 0xa2, 0x1d, 0xcd, 0x2a,
	0xb8, 0xc1, 0x34, 0x0d, 0x0a, 0xf6, 0x05, 0x86, 0xf6, 0x60, 0x9d, 0x89, 0x9c, 0x60, 0x32, 0xb1,
	0x7d, 0x97, 0x8d, 0x4e, 0xe5, 0xb3, 0x56, 0xb1, 0x53, 0xc3, 0x6b, 0x94, 0x50, 0x39, 0x4e, 0x27,
	0xe4, 0x9d, 0x55, 0x6d, 0xff, 0x4b, 0x82, 0x46, 0x76, 0x76, 0xdd, 0x9b, 0x7f, 0x56, 0x9c, 0xc9,
	0x9f, 0x3f, 0x60, 0xfc, 0x22, 0xd2, 0x07, 0x0c, 0x41, 0xc9, 0x0e, 0x47, 0xcf, 0x59, 0x15, 0x4a,
	0x98, 0xad, 0x05, 0xf6, 0x82, 0x25, 0xcd, 0xb1, 0x17, 0x02, 0xeb, 0xb2, 0x21, 0xc7, 0xb1, 0xae,
	0xc0, 0x0e, 0xd8, 0xfc, 0xe2, 0xd8, 0x81, 0xc0, 0x0e, 0xd9, 0x28, 0xe2, 0xd8, 0xa1, 0xc0, 0x5e,
	0x2a, 0x6b, 0x29, 0xf6, 0x12, 0xc9, 0x50, 0x0c, 0x49, 0xcc, 0x6a, 0x56, 0xc4, 0x74, 0xd9, 0xfe,
	0x93, 0x04, 0xb5, 0x74, 0x54, 0xa2, 0xee, 0x42, 0x7a, 0xdb, 0xf9, 0x43, 0x35, 0x93, 0xdb, 0x26,
	0x54, 0xd3, 0x8f, 0xc1, 0xef, 0x7a, 0xba, 0xa7, 0x97, 0x3d, 0x98, 0x12, 0xdf, 0xba, 0x18, 0xdb,
	0x23, 0x3e, 0xe2, 0xd7, 0x71, 0x8d, 0x22, 0x7d, 0x0a, 0xd0, 0xda, 0x33, 0x7a, 0x42, 0x6b, 0xdf,
	0xe0, 0xb5, 0xa7, 0xc0, 0x3b, 0x5a, 0xfb, 0x97, 0x50, 0x11, 0xb7, 0x89, 0x86, 0x3d, 0x15, 0x3f,
	0x00, 0xd6, 0x31, 0x5d, 0xd2, 0xe6, 0x17, 0x1f, 0x57, 0xf4, 0x5d, 0xb2, 0x6d, 0xff, 0xbb, 0x04,
	0x5f, 0xe4, 0x8c, 0x70, 0x74, 0x06, 0x35, 0x3b, 0x1c, 0xcd, 0x26, 0xc4, 0x8f, 0xe9, 0xd0, 0xa0,
	0xef, 0xe8, 0x37, 0x3f, 0x74, 0xfe, 0xef, 0xf7, 0x12, 0x4b, 0xcd, 0x8f, 0xc3, 0x6b, 0x3c, 0xf7,
	0xb4, 0xf9, 0x5f, 0x09, 0xa0, 0xef, 0x91, 0xb1, 0xfb, 0xde, 0x1e, 0xcf, 0x08, 0xfa, 0x35, 0xc0,
	0x05, 0xdd, 0x59, 0x99, 0x52, 0x76, 0x7f, 0xf0, 0x31, 0xcc, 0x11, 0x2b, 0x6f, 0xed, 0x22, 0x59,
	0xa2, 0x47, 0x50, 0x3f, 0xbf, 0x8e, 0x49, 0x64, 0x5d, 0xd1, 0x13, 0x58, 0xca, 0x0d, 0xfa, 0x20,
	0x31, 0x90, 0x9f, 0xba, 0x0b, 0x8d, 0x28, 0x0e, 0x3d, 0x7f, 0x24, 0x34, 0xf4, 0x57, 0x4f, 0xed,
	0xed, 0x03, 0x5c, 0xe7, 0xe8, 0x5c, 0xe4, 0x8d, 0x7c, 0xe2, 0x0a, 0x11, 0xfd, 0xe1, 0x83, 0x98,
	0x88, 0xa1, 0x5c, 0xf4, 0x14, 0x9a, 0x33, 0x7f, 0x41, 0x46, 0x7f, 0xff, 0x94, 0xde, 0x3e, 0xc0,
	0xab, 0x09, 0xce, 0x84, 0x74, 0xbe, 0x33, 0x7e, 0xf3, 0x7b, 0x68, 0x2e, 0x56, 0x87, 0x7e, 0xb1,
	0x4b, 0x72, 0x2d, 0x7e, 0xb2, 0xd1, 0x25, 0xd2, 0x85, 0x98, 0x05, 0x5f, 0xef, 0x1e, 0xfc, 0x7f,
	0x05, 0x61, 0x07, 0x62, 0xee, 0xe1, 0xe7, 0x85, 0xd7, 0x52, 0xfb, 0x8f, 0xec, 0xde, 0x26, 0xf5,
	0xa9, 0x43, 0xe5, 0xcc, 0x38, 0x36, 0x06, 0xdf, 0x1a, 0xf2, 0x03, 0x54, 0x83, 0xf2, 0x9b, 0x0f,
	0xa6, 0x36, 0x94, 0x25, 0x04, 0xb0, 0x32, 0x34, 0xb1, 0x6e, 0xfc, 0x52, 0x2e, 0x50, 0x78, 0xa8,
	0x1b, 0xe6, 0x6b, 0xb9, 0xc8, 0x60, 0xdd, 0x30, 0x5f, 0xbc, 0x92, 0x4b, 0xc9, 0xfa, 0xa0, 0x2b,
	0x97, 0x93, 0xf5, 0xab, 0x43, 0x79, 0x85, 0xca, 0xcf, 0x98, 0xbc, 0x42, 0xe1, 0x33, 0x2e, 0xaf,
	0x26, 0xeb, 0x83, 0xae, 0x5c, 0x4b, 0xd6, 0xaf, 0x0e, 0x65, 0x68, 0xff, 0x53, 0x82, 0x46, 0xf6,
	0xc1, 0xbf, 0x77, 0x52, 0x64, 0xc5, 0x99, 0x6e, 0xfa, 0x1c, 0x56, 0xa2, 0xc0, 0xb9, 0xbc, 0x70,
	0xc5, 0x6c, 0x10, 0x3b, 0xfa, 0xe6, 0xdb, 0xae, 0x1b, 0xce, 0x7f, 0x29, 0xed, 0xe4, 0x79, 0xec,
	0x71, 0x19, 0x4e, 0xf4, 0xd4, 0x65, 0x48, 0xa2, 0xd9, 0x38, 0x66, 0x2d, 0x86, 0xb0, 0xd8, 0xd1,
	0x1e, 0x3a, 0xb7, 0x9d, 0xcb, 0x71, 0x30, 0x12, 0xb3, 0x24, 0xd9, 0xee, 0xfd, 0x55, 0x02, 0x74,
	0xfb, 0xbd, 0x43, 0x2d, 0x78, 0xa8, 0x0e, 0x0c, 0xb3, 0xa7, 0x1b, 0x1a, 0xb6, 0xb4, 0xf7, 0x9a,
	0x61, 0x5a, 0xe6, 0x87, 0x53, 0xcd, 0x9a, 0x97, 0x3e, 0x4f, 0xa1, 0x62, 0xad, 0x67, 0x6a, 0x47,
	0xb2, 0x94, 0xab, 0xc0, 0x67, 0x86, 0xc1, 0xbf, 0xd3, 0x0e, 0x6c, 0x2d, 0x55, 0x68, 0xdf, 0xe9,
	0xd4, 0x45, 0x11, 0xb5, 0x61, 0x7b, 0xa9, 0xe0, 0x48, 0x1b, 0x9a, 0x78, 0xf0, 0x41, 0x3b, 0x92,
	0x4b, 0x7b, 0x7f, 0x90, 0x40, 0xbe, 0xf9, 0x16, 0xa1, 0x6d, 0xd8, 0x3c, 0xc5, 0x03, 0x55, 0x1b,
	0x0e, 0x97, 0x47, 0xbf, 0x05, 0x5f, 0x2c, 0xe1, 0xfb, 0x03, 0x7c, 0x2c, 0x4b, 0x39, 0xa4, 0xf6,
	0x9d, 0xa6, 0xca, 0x85, 0x5c, 0x52, 0x37, 0xe5, 0xe2, 0xde, 0x04, 0xe4, 0x9b, 0xcf, 0x02, 0x0d,
	0x65, 0xf8, 0x61, 0xa8, 0xf6, 0x4e, 0x4e, 0x96, 0x87, 0xf2, 0x10, 0x94, 0x25, 0xbc, 0x66, 0x98,
	0x1a, 0xe6, 0xb1, 0x2c, 0x63, 0xe9, 0x71, 0x85, 0xbd, 0x3e, 0xac, 0x2e, 0x8c, 0x69, 0xaa, 0xee,
	0xeb, 0x27, 0xda, 0xf2, 0x83, 0x14, 0xd8, 0xb8, 0x49, 0x0e, 0x4e, 0x35, 0x43, 0x96, 0xf6, 0xfe,
	0x2c, 0xc1, 0x56, 0x4e, 0x4f, 0x32, 0xb7, 0x3f, 0x81, 0xa7, 0xc7, 0x1a, 0x36, 0xb4, 0x13, 0xab,
	0x7f, 0x66, 0xa8, 0xa6, 0x3e, 0x30, 0xac, 0xfc, 0x7c, 0x7e, 0x0c, 0x4f, 0xee, 0x13, 0x27, 0xc9,
	0x75, 0xe0, 0xf1, 0xbd, 0x52, 0x9e, 0xe9, 0xef, 0x4b, 0x20, 0xdf, 0x6c, 0x23, 0x5a, 0x59, 0x43,
	0x33, 0xbf, 0x1d, 0xe0, 0xe3, 0xe5, 0x91, 0x7c, 0x0d, 0xed, 0x25, 0xbc, 0x3a, 0x30, 0x0c, 0x4d,
	0x35, 0xad, 0x9e, 0x69, 0x6a, 0xef, 0x4e, 0x4d, 0x59, 0x42, 0x4f, 0xe0, 0xd1, 0x1d, 0x3a, 0xac,
	0x0d, 0xcf, 0x4e, 0x4c, 0xb9, 0x80, 0x76, 0x61, 0x67, 0x89, 0xec, 0x8d, 0x6e, 0x1c, 0xa5, 0xbe,
	0xd8, 0x8d, 0xcd, 0x13, 0x09, 0x47, 0xa5, 0x9c, 0xf3, 0x4e, 0xf4, 0xa1, 0xa9, 0x19, 0xa9, 0xab,
	0x32, 0x7a, 0x0c, 0xad, 0x7c, 0x99, 0x70, 0xb6, 0x92, 0xe3, 0xac, 0xa7, 0xaa, 0xda, 0xe9, 0x3c,
	0xc7, 0x4a, 0x8e, 0x33, 0x21, 0x13, 0xce, 0xaa, 0x39, 0xce, 0x86, 0x9a, 0x71, 0x64, 0x0e, 0x52,
	0x67, 0xb5, 0x1c, 0x67, 0x42, 0x26, 0x9c, 0x01, 0x7a, 0x0a, 0xbb, 0x4b, 0x54, 0x58, 0x53, 0xdf,
	0xf7, 0xf1, 0xe0, 0x5d, 0xea, 0xae, 0x9e, 0xf3, 0x9d, 0x52, 0xa1, 0x70, 0xd8, 0x78, 0xf3, 0xf0,
	0x37, 0x9b, 0x23, 0x2f, 0xfe, 0x38, 0x3b, 0xdf, 0x77, 0x82, 0xc9, 0xb3, 0x1b, 0xff, 0x27, 0x9c,
	0xaf, 0xb0, 0xbf, 0x12, 0x0e, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x52, 0xc7, 0x40, 0xd8, 0x97,
	0x10, 0x00, 0x00,
}
