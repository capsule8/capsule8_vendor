// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/config.proto

package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This message is just a wrapper around the actual config contained w/in the
// payload
type Config struct {
	// Fully qualified name of the message type.  Must be defined by one of
	// the files in
	// proto_files. The format is `some.package.TYPE` where the final string
	// segment will be
	// used as the type name.
	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	// message data of type `type_name`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Set of .proto files which define the type.
	ProtoFiles *google_protobuf.FileDescriptorSet `protobuf:"bytes,3,opt,name=proto_files,json=protoFiles" json:"proto_files,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Config) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *Config) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Config) GetProtoFiles() *google_protobuf.FileDescriptorSet {
	if m != nil {
		return m.ProtoFiles
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "capsule8.api.v0.Config")
}

func init() { proto.RegisterFile("capsule8/api/v0/config.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x65, 0x90, 0x0a, 0x75, 0x91, 0x90, 0x3c, 0x59, 0xa5, 0x83, 0xd5, 0x29, 0x93, 0x5d,
	0xc1, 0xc2, 0x4c, 0x11, 0x23, 0x43, 0xd8, 0x58, 0x2a, 0xc7, 0xb9, 0x18, 0x4b, 0x4e, 0xce, 0x8a,
	0x9d, 0x48, 0xd9, 0xf9, 0xe1, 0x28, 0x8e, 0xc2, 0xd0, 0xf1, 0xde, 0x77, 0xf7, 0x3e, 0x1d, 0x3d,
	0x18, 0x1d, 0xe2, 0xe0, 0xe1, 0x55, 0xe9, 0xe0, 0xd4, 0x78, 0x52, 0x06, 0xbb, 0xc6, 0x59, 0x19,
	0x7a, 0x4c, 0xc8, 0x1e, 0x57, 0x2a, 0x75, 0x70, 0x72, 0x3c, 0xed, 0x85, 0x45, 0xb4, 0x1e, 0x54,
	0xc6, 0xd5, 0xd0, 0xa8, 0x1a, 0xa2, 0xe9, 0x5d, 0x48, 0xd8, 0x2f, 0x27, 0xc7, 0x5f, 0x42, 0x37,
	0xe7, 0xdc, 0xc1, 0x9e, 0xe8, 0x36, 0x4d, 0x01, 0x2e, 0x9d, 0x6e, 0x81, 0x13, 0x41, 0x8a, 0x6d,
	0x79, 0x3f, 0x07, 0x9f, 0xba, 0x05, 0xc6, 0xe9, 0x5d, 0xd0, 0x93, 0x47, 0x5d, 0xf3, 0x1b, 0x41,
	0x8a, 0x87, 0x72, 0x1d, 0xd9, 0x99, 0xee, 0x72, 0xd5, 0xa5, 0x71, 0x1e, 0x22, 0xbf, 0x15, 0xa4,
	0xd8, 0x3d, 0x1f, 0xe5, 0x62, 0x96, 0xab, 0x59, 0x7e, 0x38, 0x0f, 0xef, 0xff, 0xf6, 0x2f, 0x48,
	0x25, 0xcd, 0x6c, 0xce, 0xe3, 0xdb, 0xe1, 0x7b, 0x6f, 0x5d, 0xfa, 0x19, 0x2a, 0x69, 0xb0, 0x55,
	0x57, 0x4f, 0x56, 0x9b, 0xbc, 0xf9, 0xf2, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x06, 0xe3, 0xc4,
	0xfe, 0x00, 0x00, 0x00,
}
