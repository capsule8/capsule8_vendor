// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/capsulator_service.proto

package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Capsulator_Type int32

const (
	Capsulator_CAPSULATOR_TYPE_UNSPECIFIED Capsulator_Type = 0
	Capsulator_TYPE_RECORDER               Capsulator_Type = 1
	Capsulator_TYPE_SENSOR                 Capsulator_Type = 2
	Capsulator_TYPE_PROTECT                Capsulator_Type = 3
)

var Capsulator_Type_name = map[int32]string{
	0: "CAPSULATOR_TYPE_UNSPECIFIED",
	1: "TYPE_RECORDER",
	2: "TYPE_SENSOR",
	3: "TYPE_PROTECT",
}
var Capsulator_Type_value = map[string]int32{
	"CAPSULATOR_TYPE_UNSPECIFIED": 0,
	"TYPE_RECORDER":               1,
	"TYPE_SENSOR":                 2,
	"TYPE_PROTECT":                3,
}

func (x Capsulator_Type) String() string {
	return proto.EnumName(Capsulator_Type_name, int32(x))
}
func (Capsulator_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{4, 0} }

// TODO: NYQL integration
type ListCapsulatorsRequest struct {
}

func (m *ListCapsulatorsRequest) Reset()                    { *m = ListCapsulatorsRequest{} }
func (m *ListCapsulatorsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCapsulatorsRequest) ProtoMessage()               {}
func (*ListCapsulatorsRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type ListCapsulatorsResponse struct {
	Capsulators []*Capsulator `protobuf:"bytes,1,rep,name=capsulators" json:"capsulators,omitempty"`
}

func (m *ListCapsulatorsResponse) Reset()                    { *m = ListCapsulatorsResponse{} }
func (m *ListCapsulatorsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListCapsulatorsResponse) ProtoMessage()               {}
func (*ListCapsulatorsResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *ListCapsulatorsResponse) GetCapsulators() []*Capsulator {
	if m != nil {
		return m.Capsulators
	}
	return nil
}

type CreateCapsulatorRequest struct {
	Capsulator *Capsulator `protobuf:"bytes,1,opt,name=capsulator" json:"capsulator,omitempty"`
}

func (m *CreateCapsulatorRequest) Reset()                    { *m = CreateCapsulatorRequest{} }
func (m *CreateCapsulatorRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCapsulatorRequest) ProtoMessage()               {}
func (*CreateCapsulatorRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *CreateCapsulatorRequest) GetCapsulator() *Capsulator {
	if m != nil {
		return m.Capsulator
	}
	return nil
}

// Response not expected, clients should continue to actively stream metadata
// as long as they are connected to the platform.
type CreateCapsulatorResponse struct {
}

func (m *CreateCapsulatorResponse) Reset()                    { *m = CreateCapsulatorResponse{} }
func (m *CreateCapsulatorResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCapsulatorResponse) ProtoMessage()               {}
func (*CreateCapsulatorResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

// Capsulator Metadata
type Capsulator struct {
	// Generic capsulator fields
	Id         string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type       Capsulator_Type `protobuf:"varint,2,opt,name=type,enum=capsule8.api.v0.Capsulator_Type" json:"type,omitempty"`
	ConfigName string          `protobuf:"bytes,3,opt,name=config_name,json=configName" json:"config_name,omitempty"`
	// Auto-populated by the platform API
	ConnectedAt *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=connected_at,json=connectedAt" json:"connected_at,omitempty"`
	// RECORDER
	RecorderStartDate *google_protobuf2.Timestamp `protobuf:"bytes,10,opt,name=recorder_start_date,json=recorderStartDate" json:"recorder_start_date,omitempty"`
	RecorderEndDate   *google_protobuf2.Timestamp `protobuf:"bytes,11,opt,name=recorder_end_date,json=recorderEndDate" json:"recorder_end_date,omitempty"`
	// SENSOR
	SensorSysname  string `protobuf:"bytes,20,opt,name=sensor_sysname,json=sensorSysname" json:"sensor_sysname,omitempty"`
	SensorNodename string `protobuf:"bytes,21,opt,name=sensor_nodename,json=sensorNodename" json:"sensor_nodename,omitempty"`
	SensorRelease  string `protobuf:"bytes,22,opt,name=sensor_release,json=sensorRelease" json:"sensor_release,omitempty"`
	SensorVersion  string `protobuf:"bytes,23,opt,name=sensor_version,json=sensorVersion" json:"sensor_version,omitempty"`
}

func (m *Capsulator) Reset()                    { *m = Capsulator{} }
func (m *Capsulator) String() string            { return proto.CompactTextString(m) }
func (*Capsulator) ProtoMessage()               {}
func (*Capsulator) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *Capsulator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Capsulator) GetType() Capsulator_Type {
	if m != nil {
		return m.Type
	}
	return Capsulator_CAPSULATOR_TYPE_UNSPECIFIED
}

func (m *Capsulator) GetConfigName() string {
	if m != nil {
		return m.ConfigName
	}
	return ""
}

func (m *Capsulator) GetConnectedAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ConnectedAt
	}
	return nil
}

func (m *Capsulator) GetRecorderStartDate() *google_protobuf2.Timestamp {
	if m != nil {
		return m.RecorderStartDate
	}
	return nil
}

func (m *Capsulator) GetRecorderEndDate() *google_protobuf2.Timestamp {
	if m != nil {
		return m.RecorderEndDate
	}
	return nil
}

func (m *Capsulator) GetSensorSysname() string {
	if m != nil {
		return m.SensorSysname
	}
	return ""
}

func (m *Capsulator) GetSensorNodename() string {
	if m != nil {
		return m.SensorNodename
	}
	return ""
}

func (m *Capsulator) GetSensorRelease() string {
	if m != nil {
		return m.SensorRelease
	}
	return ""
}

func (m *Capsulator) GetSensorVersion() string {
	if m != nil {
		return m.SensorVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*ListCapsulatorsRequest)(nil), "capsule8.api.v0.ListCapsulatorsRequest")
	proto.RegisterType((*ListCapsulatorsResponse)(nil), "capsule8.api.v0.ListCapsulatorsResponse")
	proto.RegisterType((*CreateCapsulatorRequest)(nil), "capsule8.api.v0.CreateCapsulatorRequest")
	proto.RegisterType((*CreateCapsulatorResponse)(nil), "capsule8.api.v0.CreateCapsulatorResponse")
	proto.RegisterType((*Capsulator)(nil), "capsule8.api.v0.Capsulator")
	proto.RegisterEnum("capsule8.api.v0.Capsulator_Type", Capsulator_Type_name, Capsulator_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CapsulatorService service

type CapsulatorServiceClient interface {
	// Lists all active capsulators connected to the platform
	ListCapsulators(ctx context.Context, in *ListCapsulatorsRequest, opts ...grpc.CallOption) (*ListCapsulatorsResponse, error)
	// Persistent client (capsulator) -> server (c8 platform) stream of
	// capsulator metadata
	CreateCapsulator(ctx context.Context, opts ...grpc.CallOption) (CapsulatorService_CreateCapsulatorClient, error)
}

type capsulatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCapsulatorServiceClient(cc *grpc.ClientConn) CapsulatorServiceClient {
	return &capsulatorServiceClient{cc}
}

func (c *capsulatorServiceClient) ListCapsulators(ctx context.Context, in *ListCapsulatorsRequest, opts ...grpc.CallOption) (*ListCapsulatorsResponse, error) {
	out := new(ListCapsulatorsResponse)
	err := grpc.Invoke(ctx, "/capsule8.api.v0.CapsulatorService/ListCapsulators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsulatorServiceClient) CreateCapsulator(ctx context.Context, opts ...grpc.CallOption) (CapsulatorService_CreateCapsulatorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CapsulatorService_serviceDesc.Streams[0], c.cc, "/capsule8.api.v0.CapsulatorService/CreateCapsulator", opts...)
	if err != nil {
		return nil, err
	}
	x := &capsulatorServiceCreateCapsulatorClient{stream}
	return x, nil
}

type CapsulatorService_CreateCapsulatorClient interface {
	Send(*CreateCapsulatorRequest) error
	CloseAndRecv() (*CreateCapsulatorResponse, error)
	grpc.ClientStream
}

type capsulatorServiceCreateCapsulatorClient struct {
	grpc.ClientStream
}

func (x *capsulatorServiceCreateCapsulatorClient) Send(m *CreateCapsulatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *capsulatorServiceCreateCapsulatorClient) CloseAndRecv() (*CreateCapsulatorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateCapsulatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CapsulatorService service

type CapsulatorServiceServer interface {
	// Lists all active capsulators connected to the platform
	ListCapsulators(context.Context, *ListCapsulatorsRequest) (*ListCapsulatorsResponse, error)
	// Persistent client (capsulator) -> server (c8 platform) stream of
	// capsulator metadata
	CreateCapsulator(CapsulatorService_CreateCapsulatorServer) error
}

func RegisterCapsulatorServiceServer(s *grpc.Server, srv CapsulatorServiceServer) {
	s.RegisterService(&_CapsulatorService_serviceDesc, srv)
}

func _CapsulatorService_ListCapsulators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCapsulatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsulatorServiceServer).ListCapsulators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capsule8.api.v0.CapsulatorService/ListCapsulators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsulatorServiceServer).ListCapsulators(ctx, req.(*ListCapsulatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapsulatorService_CreateCapsulator_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CapsulatorServiceServer).CreateCapsulator(&capsulatorServiceCreateCapsulatorServer{stream})
}

type CapsulatorService_CreateCapsulatorServer interface {
	SendAndClose(*CreateCapsulatorResponse) error
	Recv() (*CreateCapsulatorRequest, error)
	grpc.ServerStream
}

type capsulatorServiceCreateCapsulatorServer struct {
	grpc.ServerStream
}

func (x *capsulatorServiceCreateCapsulatorServer) SendAndClose(m *CreateCapsulatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *capsulatorServiceCreateCapsulatorServer) Recv() (*CreateCapsulatorRequest, error) {
	m := new(CreateCapsulatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CapsulatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "capsule8.api.v0.CapsulatorService",
	HandlerType: (*CapsulatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCapsulators",
			Handler:    _CapsulatorService_ListCapsulators_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCapsulator",
			Handler:       _CapsulatorService_CreateCapsulator_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "capsule8/api/v0/capsulator_service.proto",
}

func init() { proto.RegisterFile("capsule8/api/v0/capsulator_service.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0x3f, 0xa7, 0xd5, 0x27, 0x75, 0xd2, 0x36, 0xc9, 0x52, 0x1a, 0xcb, 0xad, 0xd4, 0xc8,
	0x12, 0x6a, 0xe0, 0xe0, 0x54, 0x85, 0x03, 0x02, 0x71, 0x28, 0xa9, 0x2b, 0x15, 0x55, 0x49, 0xb4,
	0x76, 0x2b, 0x40, 0x42, 0xd6, 0xd6, 0x9e, 0x06, 0x4b, 0xcd, 0xae, 0xf1, 0x6e, 0x22, 0xf5, 0xc0,
	0x05, 0x89, 0x27, 0xe0, 0xc6, 0xeb, 0xf0, 0x08, 0xbc, 0x02, 0x0f, 0x82, 0xba, 0xeb, 0x34, 0x26,
	0x01, 0xc2, 0xd1, 0xff, 0xfd, 0xcd, 0x7f, 0x67, 0x3c, 0x33, 0x0b, 0xed, 0x98, 0x65, 0x72, 0x7c,
	0x8d, 0x4f, 0x3b, 0x2c, 0x4b, 0x3b, 0x93, 0x83, 0x8e, 0xf9, 0x66, 0x4a, 0xe4, 0x91, 0xc4, 0x7c,
	0x92, 0xc6, 0xe8, 0x65, 0xb9, 0x50, 0x82, 0xd4, 0xa6, 0xa4, 0xc7, 0xb2, 0xd4, 0x9b, 0x1c, 0x38,
	0xbb, 0x43, 0x21, 0x86, 0xd7, 0xa8, 0x03, 0x19, 0xe7, 0x42, 0x31, 0x95, 0x0a, 0x2e, 0x0d, 0xee,
	0xec, 0x15, 0xa7, 0xfa, 0xeb, 0x72, 0x7c, 0xd5, 0x51, 0xe9, 0x08, 0xa5, 0x62, 0xa3, 0xcc, 0x00,
	0xae, 0x0d, 0xdb, 0x67, 0xa9, 0x54, 0xdd, 0xbb, 0xfb, 0x24, 0xc5, 0x0f, 0x63, 0x94, 0xca, 0x7d,
	0x0d, 0xcd, 0x85, 0x13, 0x99, 0x09, 0x2e, 0x91, 0xbc, 0x80, 0xea, 0x2c, 0x41, 0x69, 0x5b, 0xad,
	0x95, 0x76, 0xf5, 0x70, 0xc7, 0x9b, 0x4b, 0xcd, 0x9b, 0x85, 0xd2, 0x32, 0xef, 0x5e, 0x40, 0xb3,
	0x9b, 0x23, 0x53, 0x58, 0x02, 0xcc, 0xa5, 0xe4, 0x39, 0xc0, 0x8c, 0xb4, 0xad, 0x96, 0xb5, 0xcc,
	0xb8, 0x84, 0xbb, 0x0e, 0xd8, 0x8b, 0xbe, 0x26, 0x65, 0xf7, 0xdb, 0x2a, 0xc0, 0x4c, 0x26, 0x9b,
	0x50, 0x49, 0x13, 0xed, 0xbf, 0x46, 0x2b, 0x69, 0x42, 0x9e, 0xc0, 0xaa, 0xba, 0xc9, 0xd0, 0xae,
	0xb4, 0xac, 0xf6, 0xe6, 0x61, 0xeb, 0x2f, 0x37, 0x7a, 0xe1, 0x4d, 0x86, 0x54, 0xd3, 0x64, 0x0f,
	0xaa, 0xb1, 0xe0, 0x57, 0xe9, 0x30, 0xe2, 0x6c, 0x84, 0xf6, 0x8a, 0xb6, 0x03, 0x23, 0xf5, 0xd8,
	0xe8, 0xf6, 0x47, 0xad, 0xc7, 0x82, 0x73, 0x8c, 0x15, 0x26, 0x11, 0x53, 0xf6, 0x9a, 0x2e, 0xc8,
	0xf1, 0x4c, 0x57, 0xbc, 0x69, 0x57, 0xbc, 0x70, 0xda, 0x15, 0x5a, 0xbd, 0xe3, 0x8f, 0x14, 0x79,
	0x05, 0xf7, 0x72, 0x8c, 0x45, 0x9e, 0x60, 0x1e, 0x49, 0xc5, 0x72, 0x15, 0x25, 0x4c, 0xa1, 0x0d,
	0x4b, 0x5d, 0x1a, 0xd3, 0xb0, 0xe0, 0x36, 0xea, 0x98, 0x29, 0x24, 0x27, 0x70, 0x27, 0x46, 0xc8,
	0x13, 0xe3, 0x54, 0x5d, 0xea, 0x54, 0x9b, 0x06, 0xf9, 0x3c, 0xd1, 0x3e, 0x0f, 0x60, 0x53, 0x22,
	0x97, 0xb7, 0x83, 0x79, 0x23, 0x75, 0xd9, 0x5b, 0xba, 0xec, 0x0d, 0xa3, 0x06, 0x46, 0x24, 0xfb,
	0x50, 0x2b, 0x30, 0x2e, 0x12, 0xd4, 0xdc, 0x7d, 0xcd, 0x15, 0xd1, 0xbd, 0x42, 0x2d, 0xf9, 0xe5,
	0x78, 0x8d, 0x4c, 0xa2, 0xbd, 0x5d, 0xf6, 0xa3, 0x46, 0x2c, 0x61, 0x13, 0xcc, 0x65, 0x2a, 0xb8,
	0xdd, 0x2c, 0x63, 0x17, 0x46, 0x74, 0xdf, 0xc1, 0x6a, 0x68, 0x3a, 0xb3, 0xd3, 0x3d, 0x1a, 0x04,
	0xe7, 0x67, 0x47, 0x61, 0x9f, 0x46, 0xe1, 0x9b, 0x81, 0x1f, 0x9d, 0xf7, 0x82, 0x81, 0xdf, 0x3d,
	0x3d, 0x39, 0xf5, 0x8f, 0xeb, 0xff, 0x91, 0x06, 0x6c, 0x68, 0x95, 0xfa, 0xdd, 0x3e, 0x3d, 0xf6,
	0x69, 0xdd, 0x22, 0x35, 0xa8, 0x6a, 0x29, 0xf0, 0x7b, 0x41, 0x9f, 0xd6, 0x2b, 0xa4, 0x0e, 0xeb,
	0x5a, 0x18, 0xd0, 0x7e, 0xe8, 0x77, 0xc3, 0xfa, 0xca, 0xe1, 0xd7, 0x0a, 0x34, 0x66, 0xa3, 0x10,
	0x98, 0xcd, 0x24, 0x1f, 0xa1, 0x36, 0xb7, 0x29, 0x64, 0x7f, 0x61, 0x82, 0x7e, 0xbf, 0x65, 0x4e,
	0x7b, 0x39, 0x58, 0x4c, 0x70, 0xf3, 0xd3, 0xf7, 0x1f, 0x5f, 0x2a, 0x0d, 0x52, 0xfb, 0xf5, 0x7d,
	0x90, 0xe4, 0xb3, 0x05, 0xf5, 0xf9, 0xb9, 0x27, 0x8b, 0xbe, 0x7f, 0x58, 0x39, 0xe7, 0xe1, 0x3f,
	0x90, 0x45, 0x0a, 0x8e, 0x4e, 0x61, 0xcb, 0x9d, 0x4f, 0xe1, 0x99, 0xf5, 0xa8, 0x6d, 0xbd, 0xdc,
	0x7d, 0xeb, 0x0c, 0x53, 0xf5, 0x7e, 0x7c, 0xe9, 0xc5, 0x62, 0xd4, 0x99, 0x7b, 0xd1, 0x2e, 0xff,
	0xd7, 0xc3, 0xf5, 0xf8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x02, 0xb2, 0xe7, 0xeb, 0x04,
	0x00, 0x00,
}
