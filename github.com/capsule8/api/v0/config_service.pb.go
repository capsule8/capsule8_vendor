// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/config_service.proto

package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateConfigRequest struct {
	Config *Config `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *CreateConfigRequest) Reset()                    { *m = CreateConfigRequest{} }
func (m *CreateConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigRequest) ProtoMessage()               {}
func (*CreateConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CreateConfigRequest) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

type CreateConfigResponse struct {
	Error *google_rpc.Status `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *CreateConfigResponse) Reset()                    { *m = CreateConfigResponse{} }
func (m *CreateConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigResponse) ProtoMessage()               {}
func (*CreateConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateConfigResponse) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetConfigRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetConfigRequest) Reset()                    { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()               {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetConfigResponse struct {
	Config *Config            `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Error  *google_rpc.Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetConfigResponse) Reset()                    { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()               {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetConfigResponse) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GetConfigResponse) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type WatchConfigRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *WatchConfigRequest) Reset()                    { *m = WatchConfigRequest{} }
func (m *WatchConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchConfigRequest) ProtoMessage()               {}
func (*WatchConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *WatchConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type WatchConfigResponse struct {
	Config *Config            `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Error  *google_rpc.Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *WatchConfigResponse) Reset()                    { *m = WatchConfigResponse{} }
func (m *WatchConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchConfigResponse) ProtoMessage()               {}
func (*WatchConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *WatchConfigResponse) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *WatchConfigResponse) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type ListConfigsRequest struct {
}

func (m *ListConfigsRequest) Reset()                    { *m = ListConfigsRequest{} }
func (m *ListConfigsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListConfigsRequest) ProtoMessage()               {}
func (*ListConfigsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

type ListConfigsResponse struct {
	Names []string           `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	Error *google_rpc.Status `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ListConfigsResponse) Reset()                    { *m = ListConfigsResponse{} }
func (m *ListConfigsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListConfigsResponse) ProtoMessage()               {}
func (*ListConfigsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *ListConfigsResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListConfigsResponse) GetError() *google_rpc.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateConfigRequest)(nil), "capsule8.api.v0.CreateConfigRequest")
	proto.RegisterType((*CreateConfigResponse)(nil), "capsule8.api.v0.CreateConfigResponse")
	proto.RegisterType((*GetConfigRequest)(nil), "capsule8.api.v0.GetConfigRequest")
	proto.RegisterType((*GetConfigResponse)(nil), "capsule8.api.v0.GetConfigResponse")
	proto.RegisterType((*WatchConfigRequest)(nil), "capsule8.api.v0.WatchConfigRequest")
	proto.RegisterType((*WatchConfigResponse)(nil), "capsule8.api.v0.WatchConfigResponse")
	proto.RegisterType((*ListConfigsRequest)(nil), "capsule8.api.v0.ListConfigsRequest")
	proto.RegisterType((*ListConfigsResponse)(nil), "capsule8.api.v0.ListConfigsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigService service

type ConfigServiceClient interface {
	// Create a config
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	// Get a config
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// Watch a config
	WatchConfig(ctx context.Context, in *WatchConfigRequest, opts ...grpc.CallOption) (ConfigService_WatchConfigClient, error)
	// List all available configs
	ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error)
}

type configServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigServiceClient(cc *grpc.ClientConn) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := grpc.Invoke(ctx, "/capsule8.api.v0.ConfigService/CreateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := grpc.Invoke(ctx, "/capsule8.api.v0.ConfigService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) WatchConfig(ctx context.Context, in *WatchConfigRequest, opts ...grpc.CallOption) (ConfigService_WatchConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ConfigService_serviceDesc.Streams[0], c.cc, "/capsule8.api.v0.ConfigService/WatchConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &configServiceWatchConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigService_WatchConfigClient interface {
	Recv() (*WatchConfigResponse, error)
	grpc.ClientStream
}

type configServiceWatchConfigClient struct {
	grpc.ClientStream
}

func (x *configServiceWatchConfigClient) Recv() (*WatchConfigResponse, error) {
	m := new(WatchConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configServiceClient) ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error) {
	out := new(ListConfigsResponse)
	err := grpc.Invoke(ctx, "/capsule8.api.v0.ConfigService/ListConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceServer interface {
	// Create a config
	CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error)
	// Get a config
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// Watch a config
	WatchConfig(*WatchConfigRequest, ConfigService_WatchConfigServer) error
	// List all available configs
	ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error)
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capsule8.api.v0.ConfigService/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capsule8.api.v0.ConfigService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_WatchConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigServiceServer).WatchConfig(m, &configServiceWatchConfigServer{stream})
}

type ConfigService_WatchConfigServer interface {
	Send(*WatchConfigResponse) error
	grpc.ServerStream
}

type configServiceWatchConfigServer struct {
	grpc.ServerStream
}

func (x *configServiceWatchConfigServer) Send(m *WatchConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigService_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capsule8.api.v0.ConfigService/ListConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListConfigs(ctx, req.(*ListConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "capsule8.api.v0.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfig",
			Handler:    _ConfigService_CreateConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ConfigService_GetConfig_Handler,
		},
		{
			MethodName: "ListConfigs",
			Handler:    _ConfigService_ListConfigs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConfig",
			Handler:       _ConfigService_WatchConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "capsule8/api/v0/config_service.proto",
}

func init() { proto.RegisterFile("capsule8/api/v0/config_service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x8a, 0x53, 0x31,
	0x18, 0xc5, 0xb9, 0x33, 0xce, 0x40, 0xbf, 0x3a, 0xa8, 0x5f, 0x0b, 0x2d, 0x61, 0x84, 0x1a, 0xab,
	0x14, 0x17, 0x49, 0x19, 0x37, 0xe2, 0x4a, 0x1c, 0xd0, 0x8d, 0xab, 0x0e, 0x22, 0xb8, 0x91, 0x4c,
	0x88, 0x9d, 0x0b, 0xd3, 0x24, 0x26, 0x69, 0x05, 0xff, 0x6c, 0x7c, 0x05, 0x1f, 0xcd, 0x57, 0x70,
	0xe1, 0x63, 0x48, 0x93, 0x8c, 0x73, 0x6f, 0xef, 0xa5, 0xd5, 0x85, 0xbb, 0xf6, 0xe6, 0x7c, 0xe7,
	0xfc, 0x92, 0x1c, 0x02, 0x63, 0x29, 0xac, 0x5f, 0x5e, 0xaa, 0x27, 0x5c, 0xd8, 0x92, 0xaf, 0xa6,
	0x5c, 0x1a, 0xfd, 0xbe, 0x9c, 0xbf, 0xf3, 0xca, 0xad, 0x4a, 0xa9, 0x98, 0x75, 0x26, 0x18, 0xbc,
	0x75, 0xa5, 0x62, 0xc2, 0x96, 0x6c, 0x35, 0x25, 0x83, 0xb9, 0x31, 0xf3, 0x4b, 0xc5, 0x9d, 0x95,
	0xdc, 0x07, 0x11, 0x96, 0x3e, 0x29, 0xc9, 0x71, 0xbb, 0xdf, 0xd5, 0x6a, 0x1e, 0x5b, 0xaf, 0x09,
	0xad, 0x4d, 0x10, 0xa1, 0x34, 0x3a, 0xcf, 0xd2, 0x17, 0xd0, 0x3b, 0x75, 0x4a, 0x04, 0x75, 0x1a,
	0x67, 0x66, 0xea, 0xc3, 0x52, 0xf9, 0x80, 0x1c, 0x0e, 0x93, 0xc9, 0xb0, 0x18, 0x15, 0x93, 0xee,
	0xc9, 0x80, 0x6d, 0xd0, 0xb0, 0xac, 0xcf, 0x32, 0xfa, 0x0c, 0xfa, 0x75, 0x1f, 0x6f, 0x8d, 0xf6,
	0x0a, 0x27, 0x70, 0xa0, 0x9c, 0x33, 0x2e, 0xfb, 0x20, 0x4b, 0x34, 0xcc, 0x59, 0xc9, 0xce, 0xe2,
	0x26, 0x66, 0x49, 0x40, 0x1f, 0xc2, 0xed, 0x97, 0x2a, 0xd4, 0x31, 0x10, 0x6e, 0x68, 0xb1, 0x50,
	0x71, 0xb8, 0x33, 0x8b, 0xbf, 0xa9, 0x86, 0x3b, 0x15, 0x5d, 0x8e, 0xf9, 0x57, 0xde, 0x6b, 0xae,
	0xbd, 0x5d, 0x5c, 0x13, 0xc0, 0x37, 0x22, 0xc8, 0x8b, 0xdd, 0x64, 0x16, 0x7a, 0x35, 0xe5, 0xff,
	0x67, 0xeb, 0x03, 0xbe, 0x2a, 0x7d, 0x3e, 0x0c, 0x9f, 0xd9, 0xe8, 0x6b, 0xe8, 0xd5, 0xbe, 0x66,
	0x8e, 0x3e, 0x1c, 0xac, 0x31, 0xfd, 0xb0, 0x18, 0xed, 0x4f, 0x3a, 0xb3, 0xf4, 0xe7, 0xef, 0xc3,
	0x4e, 0x7e, 0xed, 0xc3, 0x51, 0xf2, 0x3c, 0x4b, 0x45, 0xc5, 0x4f, 0x70, 0xb3, 0x7a, 0xe9, 0x38,
	0x6e, 0xee, 0xac, 0xd9, 0x2d, 0xf2, 0x60, 0x87, 0x2a, 0xe1, 0xd2, 0xbb, 0xdf, 0x7e, 0xfc, 0xfc,
	0xbe, 0x37, 0xa0, 0x78, 0xdd, 0x68, 0xcf, 0x65, 0x54, 0x3e, 0x2d, 0x1e, 0xa1, 0x86, 0xce, 0x9f,
	0x1a, 0xe0, 0xbd, 0x86, 0xe5, 0x66, 0x95, 0x08, 0xdd, 0x26, 0xc9, 0x91, 0x24, 0x46, 0xf6, 0xb1,
	0x16, 0xf9, 0x79, 0x7d, 0x4e, 0x5f, 0xf1, 0x0b, 0x74, 0x2b, 0x97, 0x8b, 0xf7, 0x1b, 0x76, 0xcd,
	0x92, 0x90, 0xf1, 0x76, 0x51, 0x4e, 0x1d, 0xc5, 0x54, 0x82, 0xc3, 0x66, 0x2a, 0xff, 0xb8, 0xd6,
	0x4f, 0x0b, 0x5c, 0x40, 0xb7, 0x72, 0xa5, 0x2d, 0xe9, 0xcd, 0x1a, 0xb4, 0xa4, 0xb7, 0xb4, 0x82,
	0xf6, 0x62, 0xfa, 0x11, 0x76, 0x2b, 0xe9, 0xcf, 0x8f, 0xdf, 0x92, 0x79, 0x19, 0x2e, 0x96, 0xe7,
	0x4c, 0x9a, 0x05, 0xdf, 0x78, 0x5e, 0xce, 0x0f, 0xe3, 0xd3, 0xf1, 0xf8, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x0a, 0xf6, 0x8a, 0x2b, 0xc8, 0x04, 0x00, 0x00,
}
