// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/telemetry_service.proto

package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Publishes a message to topic
type GetEventsRequest struct {
	// Can publish one or more message(s) at a time
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription" json:"subscription,omitempty"`
}

func (m *GetEventsRequest) Reset()                    { *m = GetEventsRequest{} }
func (m *GetEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventsRequest) ProtoMessage()               {}
func (*GetEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *GetEventsRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

type GetEventsResponse struct {
	Events []*TelemetryEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *GetEventsResponse) Reset()                    { *m = GetEventsResponse{} }
func (m *GetEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEventsResponse) ProtoMessage()               {}
func (*GetEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *GetEventsResponse) GetEvents() []*TelemetryEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type TelemetryEvent struct {
	PublishTimeMicros int64  `protobuf:"varint,1,opt,name=publish_time_micros,json=publishTimeMicros" json:"publish_time_micros,omitempty"`
	Event             *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
	Ack               []byte `protobuf:"bytes,3,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *TelemetryEvent) Reset()                    { *m = TelemetryEvent{} }
func (m *TelemetryEvent) String() string            { return proto.CompactTextString(m) }
func (*TelemetryEvent) ProtoMessage()               {}
func (*TelemetryEvent) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *TelemetryEvent) GetPublishTimeMicros() int64 {
	if m != nil {
		return m.PublishTimeMicros
	}
	return 0
}

func (m *TelemetryEvent) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *TelemetryEvent) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

func init() {
	proto.RegisterType((*GetEventsRequest)(nil), "capsule8.api.v0.GetEventsRequest")
	proto.RegisterType((*GetEventsResponse)(nil), "capsule8.api.v0.GetEventsResponse")
	proto.RegisterType((*TelemetryEvent)(nil), "capsule8.api.v0.TelemetryEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TelemetryService service

type TelemetryServiceClient interface {
	// Get telemetry events
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (TelemetryService_GetEventsClient, error)
}

type telemetryServiceClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryServiceClient(cc *grpc.ClientConn) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (TelemetryService_GetEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TelemetryService_serviceDesc.Streams[0], c.cc, "/capsule8.api.v0.TelemetryService/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_GetEventsClient interface {
	Recv() (*GetEventsResponse, error)
	grpc.ClientStream
}

type telemetryServiceGetEventsClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceGetEventsClient) Recv() (*GetEventsResponse, error) {
	m := new(GetEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TelemetryService service

type TelemetryServiceServer interface {
	// Get telemetry events
	GetEvents(*GetEventsRequest, TelemetryService_GetEventsServer) error
}

func RegisterTelemetryServiceServer(s *grpc.Server, srv TelemetryServiceServer) {
	s.RegisterService(&_TelemetryService_serviceDesc, srv)
}

func _TelemetryService_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).GetEvents(m, &telemetryServiceGetEventsServer{stream})
}

type TelemetryService_GetEventsServer interface {
	Send(*GetEventsResponse) error
	grpc.ServerStream
}

type telemetryServiceGetEventsServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceGetEventsServer) Send(m *GetEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TelemetryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "capsule8.api.v0.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _TelemetryService_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "capsule8/api/v0/telemetry_service.proto",
}

func init() { proto.RegisterFile("capsule8/api/v0/telemetry_service.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x49, 0xc3, 0x5f, 0xf8, 0xa7, 0xc5, 0xb6, 0x23, 0x4a, 0x88, 0x15, 0xeb, 0x6c, 0x2c,
	0x22, 0x93, 0x52, 0x17, 0x8a, 0x3b, 0x05, 0x71, 0xa3, 0x9b, 0xb4, 0x6e, 0xdc, 0x94, 0x24, 0x5c,
	0xda, 0xa1, 0x49, 0x66, 0xcc, 0x9d, 0x04, 0x5c, 0x29, 0xbe, 0x82, 0x8f, 0xe6, 0x2b, 0xf8, 0x20,
	0xd2, 0x49, 0x5b, 0xda, 0x14, 0xdc, 0x0d, 0x9c, 0xef, 0xdc, 0x7b, 0xe6, 0x1e, 0x72, 0x16, 0x05,
	0x0a, 0xf3, 0x18, 0xae, 0xbd, 0x40, 0x09, 0xaf, 0x18, 0x78, 0x1a, 0x62, 0x48, 0x40, 0x67, 0x6f,
	0x13, 0x84, 0xac, 0x10, 0x11, 0x70, 0x95, 0x49, 0x2d, 0x69, 0x6b, 0x05, 0xf2, 0x40, 0x09, 0x5e,
	0x0c, 0x5c, 0x56, 0x75, 0x62, 0x1e, 0x62, 0x94, 0x09, 0xa5, 0x85, 0x4c, 0x4b, 0x93, 0x7b, 0x54,
	0x65, 0xa0, 0x80, 0x54, 0x2f, 0xc5, 0xee, 0x54, 0xca, 0x69, 0x0c, 0x46, 0x0a, 0xd2, 0x54, 0xea,
	0x60, 0xe1, 0xc4, 0x52, 0x65, 0xcf, 0xa4, 0xfd, 0x00, 0xfa, 0x7e, 0xc1, 0xa3, 0x0f, 0xaf, 0x39,
	0xa0, 0xa6, 0xb7, 0xa4, 0xb9, 0xb9, 0xc4, 0xb1, 0x7a, 0x56, 0xbf, 0x31, 0x3c, 0xe6, 0x95, 0x68,
	0x7c, 0xb4, 0x01, 0xf9, 0x5b, 0x16, 0xf6, 0x48, 0x3a, 0x1b, 0x63, 0x51, 0xc9, 0x14, 0x81, 0x5e,
	0x91, 0xba, 0x09, 0x86, 0x8e, 0xd5, 0xb3, 0xfb, 0x8d, 0xe1, 0xc9, 0xce, 0xc4, 0xf1, 0xea, 0x2a,
	0xc6, 0xe9, 0x2f, 0x71, 0xf6, 0x61, 0x91, 0xbd, 0x6d, 0x89, 0x72, 0xb2, 0xaf, 0xf2, 0x30, 0x16,
	0x38, 0x9b, 0x68, 0x91, 0xc0, 0x24, 0x11, 0x51, 0x26, 0xd1, 0x44, 0xb5, 0xfd, 0xce, 0x52, 0x1a,
	0x8b, 0x04, 0x9e, 0x8c, 0x40, 0x2f, 0xc8, 0x3f, 0x33, 0xcc, 0xa9, 0x99, 0xcf, 0x1c, 0xee, 0xac,
	0x2e, 0x37, 0x96, 0x10, 0x6d, 0x13, 0x3b, 0x88, 0xe6, 0x8e, 0xdd, 0xb3, 0xfa, 0x4d, 0x7f, 0xf1,
	0x1c, 0xbe, 0x93, 0xf6, 0x3a, 0xc1, 0xa8, 0x6c, 0x8c, 0xce, 0xc9, 0xff, 0xf5, 0x27, 0xe9, 0xe9,
	0xce, 0xc4, 0xea, 0x5d, 0x5d, 0xf6, 0x17, 0x52, 0xde, 0x88, 0x1d, 0x7c, 0x7e, 0xff, 0x7c, 0xd5,
	0x5a, 0x8c, 0xac, 0x6b, 0xc4, 0x1b, 0xeb, 0x7c, 0x60, 0xdd, 0x75, 0x5f, 0xdc, 0xa9, 0xd0, 0xb3,
	0x3c, 0xe4, 0x91, 0x4c, 0xbc, 0x4a, 0xe1, 0x61, 0xdd, 0xb4, 0x79, 0xf9, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x32, 0x29, 0xe7, 0x36, 0x68, 0x02, 0x00, 0x00,
}
