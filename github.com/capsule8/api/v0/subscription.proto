// Copyright 2017 Capsule8 Inc. All rights reserved.

syntax = "proto3";

package capsule8.api.v0;
option go_package = "github.com/capsule8/api/v0";

import "capsule8/api/v0/event.proto";
import "google/protobuf/wrappers.proto";

//
// Subscription identifies a subscriber's interest in events. The optional
// Filter field restricts the subscription to the nodes and processes
// specified within. The optional Selector field specifies the types and
// properties of the events desired by the subscriber.
//
message Subscription {
        // Return events matching one or more of the specified event
        // filters. If no event filters are specified, then no events
        // will be returned.
        EventFilter event_filter = 1;

        // If not empty, then only return events from containers matched
        // by one or more of the specified container filters.
        ContainerFilter container_filter = 2;

        // If not empty, then only return events from Sensors matched by
        // one or more of the specified sensor filters.
        SensorFilter sensor_filter = 3;

        // If not empty, then only return events that occurred after
        // the specified relative duration subtracted from the current
        // time (recorder time). If the resulting time is in the past, then the
        // subscription will search for historic events before streaming
        // live ones.
        google.protobuf.Int64Value since_duration = 10;

        // If not empty, then only return events that occurred before
        // the specified relative duration added to `since_duration`.
        // If `since_duration` is not supplied, return events from now and until
        // the specified relative duration is hit.
        google.protobuf.Int64Value for_duration = 11;

        // If not empty, apply the specified modifier to the subscription.
        Modifier modifier = 20;

        // If PROCESS_VIEW_FULL, every event will include additional process
        // ancestry context.
        ProcessView process_view = 30;
}

message SensorFilter {
        // If set, then restrict events to specified ...
}

message ContainerFilter {
        repeated string ids   = 1;
        repeated string names = 2;

        repeated string image_ids = 3;

        // Container image name (shell-style globs are supported)
        repeated string image_names = 4;
}

message EventFilter {
        //
        // Kernel-level events
        //
        repeated SyscallEventFilter syscall_events = 1;
        repeated ProcessEventFilter process_events = 2;
        repeated FileEventFilter file_events       = 3;

        //
        // Operating System-level events (containers, etc)
        //
        repeated ContainerEventFilter container_events = 10;

        //
        // Debugging events (>= 100)
        //
        repeated ChargenEventFilter chargen_events = 100;
        repeated TickerEventFilter ticker_events   = 101;
}

message SyscallEventFilter {
        // Type of system call event (entry w/ args or exit w/ ret)
        SyscallEventType type = 1;

        // System call number (arch/x86/entry/syscalls/syscall_64.tbl)
        google.protobuf.Int64Value id = 2;

        google.protobuf.UInt64Value arg0 = 10;
        google.protobuf.UInt64Value arg1 = 11;
        google.protobuf.UInt64Value arg2 = 12;
        google.protobuf.UInt64Value arg3 = 13;
        google.protobuf.UInt64Value arg4 = 14;
        google.protobuf.UInt64Value arg5 = 15;

        google.protobuf.Int64Value ret = 20;
}

message ProcessEventFilter {
        // Required; the process event type to match
        ProcessEventType type = 1;

        // Optional; require exact match on the command name associated
        // with the process as shown in /proc/[pid]/comm
        // google.protobuf.StringValue comm = 10;

        // Optional; require pattern match on the command name associated
        // with the process as shown in /proc/[pid]/comm
        // google.protobuf.StringValue comm_pattern = 11;

        // google.protobuf.StringValue exec_filename         = 12;
        // google.protobuf.StringValue exec_filename_pattern = 13;

        // google.protobuf.Int32Value exit_code = 14;
}

message FileEventFilter {
        // Required
        FileEventType type = 1;

        // Optional filename exact match
        google.protobuf.StringValue filename = 10;

        // Optional filename pattern
        google.protobuf.StringValue filename_pattern = 11;

        // Optional open(2) flags mask value
        google.protobuf.Int32Value open_flags_mask = 12;

        // Optional open(2)/creat(2) mode mask value
        google.protobuf.Int32Value create_mode_mask = 13;
}

enum ContainerEventView {
        // Default view of a ContainerEvent includes just basic information
        BASIC = 0;

        // Full view of a ContainerEvent includes raw Docker and OCI config JSON
        FULL = 1;
}

message ContainerEventFilter {
        // Required, specify the particular type of event type to match
        ContainerEventType type = 1;

        // Optional, specifies how much detail to include in container events
        ContainerEventView view = 2;

        // StringValue image_id
        // StringValue image_name
        // StringValue layer_id
}

message ChargenEventFilter {
        // Length of character sequence strings to generate
        uint64 length = 1;
}

message TickerEventFilter {
        // The interval at which ticker events are generated
        int64 interval = 1;
}

//
// Modifier specifies which stream modifiers to apply if any. For a given
// stream, a modifier can apply a throttle or limit etc. Modifiers can be
// used together.
//
message Modifier {
        ThrottleModifier throttle = 1;
        LimitModifier limit       = 2;
}

message ThrottleModifier {
        int64 interval = 1;
        enum IntervalType {
                MILLISECOND = 0;
                SECOND      = 1;
                MINUTE      = 2;
                HOUR        = 3;
        }
        IntervalType interval_type = 2;
}

message LimitModifier {
        // Limit the number of events
        int64 limit = 1;
}

enum ProcessView {
        // Default process view of an event includes just basic process information
        PROCESS_VIEW_BASIC = 0;

        // Full processview of an event includes process ancestory
        PROCESS_VIEW_FULL  = 1;
}
