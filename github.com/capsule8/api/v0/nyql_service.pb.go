// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/nyql_service.proto

package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateSubscriptionRequest struct {
	// NYQL query string
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *CreateSubscriptionRequest) Reset()                    { *m = CreateSubscriptionRequest{} }
func (m *CreateSubscriptionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSubscriptionRequest) ProtoMessage()               {}
func (*CreateSubscriptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *CreateSubscriptionRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type CreateSubscriptionResponse struct {
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription" json:"subscription,omitempty"`
	Errors       []string      `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *CreateSubscriptionResponse) Reset()                    { *m = CreateSubscriptionResponse{} }
func (m *CreateSubscriptionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSubscriptionResponse) ProtoMessage()               {}
func (*CreateSubscriptionResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *CreateSubscriptionResponse) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *CreateSubscriptionResponse) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateSubscriptionRequest)(nil), "capsule8.api.v0.CreateSubscriptionRequest")
	proto.RegisterType((*CreateSubscriptionResponse)(nil), "capsule8.api.v0.CreateSubscriptionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NYQLService service

type NYQLServiceClient interface {
	// Publishes messages to a topic
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
}

type nYQLServiceClient struct {
	cc *grpc.ClientConn
}

func NewNYQLServiceClient(cc *grpc.ClientConn) NYQLServiceClient {
	return &nYQLServiceClient{cc}
}

func (c *nYQLServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	out := new(CreateSubscriptionResponse)
	err := grpc.Invoke(ctx, "/capsule8.api.v0.NYQLService/CreateSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NYQLService service

type NYQLServiceServer interface {
	// Publishes messages to a topic
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
}

func RegisterNYQLServiceServer(s *grpc.Server, srv NYQLServiceServer) {
	s.RegisterService(&_NYQLService_serviceDesc, srv)
}

func _NYQLService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NYQLServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/capsule8.api.v0.NYQLService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NYQLServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NYQLService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "capsule8.api.v0.NYQLService",
	HandlerType: (*NYQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscription",
			Handler:    _NYQLService_CreateSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "capsule8/api/v0/nyql_service.proto",
}

func init() { proto.RegisterFile("capsule8/api/v0/nyql_service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x4e, 0x2c, 0x28,
	0x2e, 0xcd, 0x49, 0xb5, 0xd0, 0x4f, 0x2c, 0xc8, 0xd4, 0x2f, 0x33, 0xd0, 0xcf, 0xab, 0x2c, 0xcc,
	0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x87, 0xa9, 0xd1, 0x4b, 0x2c, 0xc8, 0xd4, 0x2b, 0x33, 0x90, 0xc2, 0xd0, 0x54, 0x5c, 0x9a, 0x54,
	0x9c, 0x5c, 0x94, 0x59, 0x50, 0x92, 0x99, 0x9f, 0x07, 0xd1, 0x24, 0x25, 0x93, 0x9e, 0x9f, 0x9f,
	0x9e, 0x93, 0x0a, 0x56, 0x91, 0x98, 0x97, 0x97, 0x5f, 0x92, 0x08, 0x92, 0x2c, 0x86, 0xc8, 0x2a,
	0x19, 0x72, 0x49, 0x3a, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x06, 0x23, 0xe9, 0x0c, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0x2c, 0x4d, 0x2d, 0xaa, 0x94, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0xca, 0xb9, 0xa4, 0xb0, 0x69, 0x29, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0x15, 0x72, 0xe4, 0xe2, 0x41, 0x76, 0x04, 0x58, 0x2b, 0xb7, 0x91, 0xac, 0x1e, 0x9a, 0xd3,
	0xf5, 0x50, 0x34, 0xa3, 0x68, 0x11, 0x12, 0xe3, 0x62, 0x4b, 0x2d, 0x2a, 0xca, 0x2f, 0x2a, 0x96,
	0x60, 0x52, 0x60, 0xd6, 0xe0, 0x0c, 0x82, 0xf2, 0x8c, 0xe6, 0x33, 0x72, 0x71, 0xfb, 0x45, 0x06,
	0xfa, 0x04, 0x43, 0x02, 0x45, 0xa8, 0x9f, 0x91, 0x4b, 0x08, 0xd3, 0x25, 0x42, 0x5a, 0x18, 0x76,
	0xe1, 0xf4, 0xa1, 0x94, 0x36, 0x51, 0x6a, 0x21, 0x5e, 0x53, 0x52, 0x68, 0xba, 0xfc, 0x64, 0x32,
	0x93, 0x94, 0x92, 0x28, 0x2c, 0x7a, 0x50, 0x82, 0xdb, 0x8a, 0x51, 0xcb, 0x49, 0x26, 0x4a, 0x2a,
	0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0x2d, 0x72, 0x92, 0xd8, 0xc0,
	0x41, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x26, 0x0c, 0x22, 0xeb, 0x01, 0x00, 0x00,
}
